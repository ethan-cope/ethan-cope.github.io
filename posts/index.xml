<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hey, I&#39;m Ethan.</title>
		<link>https://ethan-cope.github.io/posts/</link>
		<description>Recent content in Posts on Hey, I&#39;m Ethan.</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 02 Feb 2022 13:28:52 -0600</lastBuildDate>
		<atom:link href="https://ethan-cope.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>üèÜ MyMirror: a Google-integrated Smart Mirror</title>
			<link>https://ethan-cope.github.io/posts/mymirror/</link>
			<pubDate>Wed, 02 Feb 2022 13:28:52 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/mymirror/</guid>
			<description>Note: More information about myMirror can be found on the project&amp;rsquo;s devpost. Check there for other peoples&amp;rsquo; contributions!
Why myMirror? When I wake up in the morning, there&amp;rsquo;s a lot I know I probably should do. For example, I should probably prepare for the day ahead by checking the weather and my daily calendar. But often times, I just don&amp;rsquo;t. For situations like this, myMirror is here to help.
myMirror solves the above dilemma by integrating this crucial information into your everyday bathroom mirror.</description>
			<content type="html"><![CDATA[<p><em>Note: More information about myMirror can be found on <a href="https://devpost.com/software/mymirror">the project&rsquo;s devpost</a>.</em>
<em>Check there for other peoples&rsquo; contributions!</em></p>
<h2 id="why-mymirror">Why myMirror?</h2>
<p>When I wake up in the morning, there&rsquo;s a lot I know I probably should do.
For example, I should probably prepare for the day ahead by checking the weather and my daily calendar.
But often times, <strong>I just don&rsquo;t</strong>. For situations like this, myMirror is here to help.</p>
<p>myMirror solves the above dilemma by integrating this crucial information into your everyday bathroom mirror.
myMirror is a <em>smart mirror</em> with an embedded display screen,
displaying the current time and date, weather for your area, and personal Google Calendar reminders.
It even features a motion sensor, turning off the display to save power when a user isn&rsquo;t detected.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<figure class="middle"><img src="Software.png"
         alt="image"/><figcaption>
            <p>The software side of myMirror</p>
        </figcaption>
</figure>

<p>On the software side, myMirror is essentially a specialized website. It&rsquo;s written in pure Javascript, HTML, and CSS.
It utilizes the Open Weather Maps and Google Calendar APIs to display this information to the user.
The mirror itself is a pane of one-way glass with a 3.5&quot; display is mounted behind it.
A modified Raspberry Pi drives the display and handles the power management alongside the motion sensor.</p>
<h3 id="what-did-you-do">What did you do?</h3>
<p>myMirror was my idea, so I ended up leading the charge to get this project finished in 24 hours.
As the team lead, I had to check in with others, keep morale up, and delegate tasks where I wasn&rsquo;t the best person for the job.
But I did quite a bit of programming myself! I handled the hardware side of myMirror.
This included:</p>
<ul>
<li>Modifying the pi to drive a display with non-standard resolution and aspect ratios</li>
<li>Programming a daemon that interfaces with xScreenSaver to unblank the screen when motion is detected</li>
<li>Automating the execution of the program in case of power loss or a hard reboot</li>
</ul>
<h2 id="whats-next-for-mymirror">What&rsquo;s next for myMirror?</h2>
<p>There are a few upgrades we&rsquo;re considering implementing.</p>
<ul>
<li>
<p>First off, we want a serious codebase refresh. Anything written in 24 hours could stand to be written again in a cleaner, more concise way.</p>
</li>
<li>
<p>Next, a bigger display. 3.5&quot;x2&quot; is just too small for any sizeable mirror.
The next step will most likely be the Raspberry Pi Foundation&rsquo;s own official 7&quot; display.</p>
</li>
<li>
<p>More Information! With great display space comes great responsibility: to fill that space with relevant data!
Some ideas:</p>
<ul>
<li>Texas A&amp;M Bus Schedule - Either using code swiped from Buswarn or the Texas A&amp;M Transport website.
myMirror could display what time the next bus arrives at your stop, or it the transport map itself!</li>
<li>Spotify - This could be as simple as a progress bar with information about the current song you&rsquo;re listening to.</li>
</ul>
</li>
</ul>
<figure class="middle"><img src="demo.jpg"
         alt="image"/><figcaption>
            <p>myMirror in action! (feat: me)</p>
        </figcaption>
</figure>

<h2 id="who-contributed">Who contributed?</h2>
<ul>
<li>Me! (<a href="https://www.linkedin.com/in/ethancope">Ethan Cope</a>) - Director, hardware, and scripting</li>
<li><a href="https://www.linkedin.com/in/alexander-anderson43d/">Alex Anderson</a> - Frontend and weather integration</li>
<li><a href="https://www.linkedin.com/in/claytonkristiansen/">Clayton Kristiansen</a> - Google Calendar integration</li>
<li><a href="">Alexandria Garcia</a> - API integration and documentation</li>
</ul>
<p><em>Notably: none of these guys are computer science majors! We learned most of this Web Development stuff on the fly!</em></p>
<h2 id="where--when">Where / When?</h2>
<p>TamuHack 2022, Jan 29-30 2022.
TamuHack is a Hackathon, a contest where teams of 4 engineers have 24 hours to design, implement, and present a product to industry judges.</p>
<h2 id="takeaways">Takeaways</h2>
<p>myMirror won first place in the novice division at TamuHack 2022.
But I walked away from this competition with more than just newfound pride and acute sleep deprivation.
As the team lead, I didn&rsquo;t really have time to hunker down and work on my own thing, which was a new experience for me.
But through this process I learned to sit back and trust people to do their work well.
When a small team of skilled people all play to their strengths, crazy ideas like myMirror can actually come to life!</p>
<p>Thanks for tuning in!</p>
]]></content>
		</item>
		
		<item>
			<title>Spelling Test Auto-Grader for Catch Up and Read</title>
			<link>https://ethan-cope.github.io/posts/auto-grader/</link>
			<pubDate>Wed, 12 Jan 2022 18:21:31 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/auto-grader/</guid>
			<description>&amp;ldquo;Automation is good, so long as you know exactly where to put the machine.&amp;rdquo;
~ Eliyahu Goldratt
 One perk of being a programmer is my ability to automate boring, repetitive tasks I do daily. But what&amp;rsquo;s even more rewarding is the opportunity to help non-programmers with their data analysis drudgery. Such is the case with this project.
The Problem The problem in question is that of third-grade spelling tests.</description>
			<content type="html"><![CDATA[<blockquote>
<p>&ldquo;Automation is good, so long as you know exactly where to put the machine.&rdquo;<br>
~ Eliyahu Goldratt</p>
</blockquote>
<p>One perk of being a programmer is my ability to automate boring, repetitive tasks I do daily.
But what&rsquo;s even more rewarding is the opportunity to help non-programmers with their data analysis drudgery.
Such is the case with this project.</p>
<h2 id="the-problem">The Problem</h2>
<p>The problem in question is that of third-grade spelling tests.
By analyzing patterns of how a student misspells words,
a smart teacher can determine what concepts that student struggles with and modify their lesson plan accordingly.
This analysis is tedious, requires a fair amount of calculation, and if you&rsquo;ve made it this far you know where this is going.
<strong>Automation!!</strong></p>
<h2 id="constraints">Constraints</h2>
<p>While the logic of this problem already makes it more than interesting to tackle, additional constraints added to the challenge.</p>
<ul>
<li>The program must be intuitive - Any teacher should be able to walk up and use it without training. This means the program needs to be extremely robust and have a very pretty user interface.</li>
<li>The program must be easily distributable - It can&rsquo;t require installing a program or programming language onto the user&rsquo;s computer</li>
<li>The program has to be accessible through public school wifi - no easy feat with archaic whitelist-based firewalls.</li>
</ul>
<p>Given these constraints, I decided to commit a cardinal sin of web development - combining css, javascript, and HTML on a single file.
Doing so would allow me to distribute an HTML file containing the program to teachers, bypassing the firewall issue entirely.</p>
<h2 id="implementation">Implementation</h2>
<figure class="middle"><img src="chunks.png"
         alt="the many chunks of the English language"/><figcaption>
            <p>the many chunks of the English language</p>
        </figcaption>
</figure>

<p>Jumping right in: each word on the test can be split up into chunks, all of which are seen above.
Teachers normally go through each word the child has misspelled and determine which chunks have been missed.
They then tally up each of these incorrect chunks and highlight the most missed chunks on the sheet seen above.</p>
<p>In order to mimic this behavior, my program splits the word into &ldquo;runs&rdquo; of vowels and consonants.
Using Regex, it handles vowel-consonant pairs on a special case-by case basis.
For the intents and purposes of this program (and the English language, for that matter) these chunks are vowels.</p>
<h3 id="an-example">An example</h3>
<p>Let&rsquo;s consider the word <strong>fright</strong></p>
<ul>
<li>The first match is <strong>fr</strong>, a run of 2 consonants</li>
<li>Next, it matches <strong>igh</strong>, a special case called a Long Vowel</li>
<li>Finally, the program matches t, a single consonant</li>
</ul>
<p>So, this word chunked up is <code>['fr', 'igh', 't']</code></p>
<p>In order to grade the incorrect word, it&rsquo;s chunks need to be compared to the chunks of the correct word.
The comparison method compares based on the vowel-consonant pattern of the correct word,
meaning that one mistaken chunk won&rsquo;t affect the validity of other chunks in the word</p>
<p>let&rsquo;s see this in action!</p>
<figure class="middle"><img src="ChunkExample.png"
         alt="word analysis section of program"/><figcaption>
            <p>word analysis section of program</p>
        </figcaption>
</figure>

<p><em>Word Analysis</em></p>
<ul>
<li>&ldquo;blayde&rdquo; marks both &lsquo;a&rsquo; and &rsquo;e&rsquo; incorrect because together they form an incorrect long vowel.</li>
<li>when the program doesn&rsquo;t have enough chunks to work with, as is the case with &ldquo;kat&rdquo;, it gracefully marks these chunks incorrect.</li>
</ul>
<p><figure class="right"><img src="ChunkAnalysis.png"
         alt="chunk analysis section of program"/><figcaption>
            <p>chunk analysis section of program</p>
        </figcaption>
</figure>

<em>Chunk Analysis</em></p>
<ul>
<li>The analysis section shows teachers what chunks the student has particular problems with.</li>
<li>If the program incorrectly marks a chunk as wrong, that specific chunk can be clicked here to factor it out of the calculation.</li>
</ul>
<h2 id="takeaways">Takeaways</h2>
<p>Outside of the core program, the difficulty of this this project lay in the sheer number of edge cases.
Word endings, long vowels, and unmatching vowel-consonant patterns all had to be handled gracefully.
While it would have been great to deploy this to a website to show it off, saving the file locally just made more sense.
I guess the best solution also happens to be the easiest one in this case!</p>
<p>In the future, I&rsquo;d love to expand this program to work with the Spanish-language tests as well.
Doing so would be a slog (mo chunks, mo problems). If anyone wants to take a crack at decoding Spanish, here&rsquo;s the
<a href="https://github.com/ethan-cope/ChunkGrader">Github Repo</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Professional CD Crafting with CDRDAO</title>
			<link>https://ethan-cope.github.io/posts/cdrdao/</link>
			<pubDate>Tue, 04 Jan 2022 13:55:04 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/cdrdao/</guid>
			<description>All digital music listeners are equal. Acquisition is painless. Taste is irrelevant. It is pointless to boast about your iTunes collection, or the quality of your playlists on a streaming service. Music became data, one more set of 1&amp;rsquo;s and 0&amp;rsquo;s lurking in your hard drive, invisible to see and impossible to touch. Nothing is less cool than data. ~ David Sax
 Physical media is back. vinyl and cassette sales are through the roof, and why shouldn&amp;rsquo;t they be?</description>
			<content type="html"><![CDATA[<blockquote>
<p>All digital music listeners are equal. Acquisition is painless. Taste is irrelevant. It is pointless to boast about your iTunes collection, or the quality of your playlists on a streaming service. Music became data, one more set of 1&rsquo;s and 0&rsquo;s lurking in your hard drive, invisible to see and impossible to touch. Nothing is less cool than data. ~ David Sax</p>
</blockquote>
<p>Physical media is back. vinyl and cassette sales are through the roof, and why shouldn&rsquo;t they be? Digital music services have deprived us of that tactile feel of dropping a needle onto a well-worn album, and the intimate experience of pulling a record from its sleeve.<br>
But today I&rsquo;m focusing on the least flashy member of the physical media family: CDs.</p>
<h2 id="why-cds">Why CDs?</h2>
<p>Everyone loves CDs. Seriously, even though it&rsquo;s been a decade since anyone&rsquo;s used a CD player,
popping open a jewel case brings warm nostalgic memories to the forefront of our minds.
But besides the nostalgia factor, why bother with CDs?</p>
<ul>
<li>First off, CDs are highly customizable. Don&rsquo;t like the ending of a song? Wish the crossfade was smoother between a few tracks on a playlist? Spend half an hour with editing software such as <a href="https://www.audacityteam.org/">Audacity</a>, and you can turn your digital playlists into mixtapes that rival albums and surpass playlists in musicality and momentum.</li>
<li>CD players are cheap, and most modern vehicles still have them. Unlike a phone, your favorite mixtape won&rsquo;t run out of battery!</li>
<li>If you have an artistic bent, you can make CD art with nothing more than a few sharpie markers, like this!</li>
</ul>
<figure class="middle"><img src="https://i.redd.it/mnz4x8mxc5iz.jpg"
         alt="image"/><figcaption>
            <p>Note: not my art, belongs to reddit user <a href="https://www.reddit.com/r/themurlocs/comments/6w8470/sometimes_i_get_carried_away_with_my_burnt_cd/">mddecker</a></p>
        </figcaption>
</figure>

<h2 id="the-problem">The Problem</h2>
<p>If you&rsquo;ve ever tried to burn your own CDs using Windows Media Player or similar software, you know the results are much less than ideal.
Because WMP burns the entire tracklist track-by-track, the CD player needs a half-second gap between <strong>each track</strong>.
While an eloquent solution to be sure, this understandably kills an album&rsquo;s flow, it&rsquo;s momentum.</p>
<p>So why do retail CDs not have this issue?
Well, instead of burning track by track, retail CDs are burned in DAO, or Disk-At-Once mode.
Doing so encodes the track boundaries in the CD&rsquo;s metadata, which in turn tells the CD player <em>exactly</em> where each track starts and ends. No gaps!
Burning discs in DAO mode gives other benefits as well. Want track names that are visible on the CD Player? Want secret tracks akin to runout grooves on old records? All these are possible with DAO burning.</p>
<p>DAO burning software was once exorbitantly expensive and hard to track down.
But luckily, our friends in the open-source community have a solution: <a href="http://cdrdao.sourceforge.net/">cdrdao</a>.</p>
<h1 id="using-cdrdao">Using CDRDAO</h1>
<p>CDRDAO is a command-line only program. but don&rsquo;t be scared!
Dear reader, I&rsquo;ve done just about everything I can to make using this powerful program as easy as possible!
However, you&rsquo;ll need a few things first.</p>
<ul>
<li>a computer that <strong>has A DVD RW Drive</strong> and is running some distribution of <strong>Linux</strong>.</li>
<li>my <a href="https://github.com/ethan-cope/cdrdao-tools">code</a> from github</li>
<li>music files to be burned to a CD: .wav, m4a, or mp3 files</li>
</ul>
<h2 id="downloading-needed-programs">Downloading needed programs</h2>
<p>here, you need cdrdao and ffmpeg. both can be acquired from your friendly neighborhood package manager.</p>
<p>On Arch Linux:</p>
<pre tabindex="0"><code>sudo pacman -S cdrdao ffmpeg 
</code></pre><h2 id="converting-files-to-wav">Converting files to .wav</h2>
<p>Cdrdao only works with .wav files. If your tracks are pulled from iTunes, they might be .m4a, or possibly .mp3 files.
ffmpeg makes converting them relatively easy, but I also wrote a script that makes this process even more simple!
This script quickly converts all the files in a directory of a given extension to .wav files, which can work with cdrdao!
Here&rsquo;s how to use it:</p>
<ol>
<li>in <code>convertToWav.sh</code>, modify the <code>FILES</code> variable to reflect the file type you&rsquo;re converting from. For example:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.m4a <span class="c1"># this will convert all .m4a files in the directory to .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.mp3 <span class="c1"># this will convert all .mp3 files in the directory to .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.&lt;extension type&gt; 
</span></span><span class="line"><span class="cl"><span class="c1"># this will convert all .&lt;extension type&gt; files in the directory to .wav files</span>
</span></span></code></pre></div><ol start="2">
<li>Run the program specifying the source directory as follows below:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">convertToWav.sh ../Music/Crime_of_the_Century 
</span></span><span class="line"><span class="cl"><span class="c1">#this will convert all audio files in ../Music/Crime_of_the_Century into .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">convertToWav.sh &lt;path to <span class="nb">source</span> directory&gt; 
</span></span><span class="line"><span class="cl"><span class="c1">#this will convert all audio files in &lt;source directory&gt; to .wav files</span>
</span></span></code></pre></div><p><strong>NOTE:</strong> Not all .wav files are created equal! Some don&rsquo;t work with cdrdao due to encoding issues.
to work around this, change the extension to <code>.wav</code>, and run the conversion program!</p>
<h2 id="song-number-shifting">Song Number Shifting</h2>
<p>When burning with CDRDAO, all your tracks need to be in the same directory.
In order to preserve song order, each track is numbered like so: <code>'01 In This State.wav'</code>
If you&rsquo;re building a mixtape song-by-song, manually re-numbering tracks is no problem.
But if you&rsquo;re putting multiple songs from the same source on a disc, this gets tedious. enter <code>songShift.sh</code>.</p>
<p>Let&rsquo;s use an example for this one. I have 3 directories: <code>Album1</code>, <code>Album2</code>, which contain songs I want to combine into one CD,
and <code>Mixtape</code>, which will hold the final album .wav files in the correct order.
Let&rsquo;s say we want to put Album2 after Album1, and Album1 is 8 tracks long.
Then we&rsquo;ll run the program like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">songShift.sh &lt;path to Album2&gt; <span class="m">8</span> <span class="c1">#shifting all track numbers by 8</span>
</span></span><span class="line"><span class="cl">cp &lt;path to Album2&gt;/*.wav &lt;path to Mixtape&gt; <span class="c1"># copying all the shifted songs to the Mixtape dir.</span>
</span></span></code></pre></div><h2 id="generating-toc">Generating TOC</h2>
<p>Cdrdao uses a TOC (or Table Of Contents) file as a template for the contents of the CD. This file contains the track listings, and is used to burn the CD with pretty track names.
Full documentation for TOC files is found <a href="https://tldp.org/HOWTO/MP3-CD-Burning/dao-burning.html">here</a>.
I wrote a script to take some of the tedium out of generating these TOC files.
Simply run the program as follows!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">genToc.sh &lt;path to directory with .tracks&gt;
</span></span></code></pre></div><h2 id="burning-cd">Burning CD</h2>
<p>The next step is simulating the CD burn, which allows you to catch any errors before actually burning the CD.
Just run <code>cdrdao simulate</code> in the same directory as the TOC file and .wav files. If this doesn&rsquo;t spit out any errors, you&rsquo;re ready to burn!
Run the following command to burn the CD!</p>
<pre tabindex="0"><code>cdrdao write --driver generic-mmc-raw --eject (toc file name) 
</code></pre><h2 id="future-improvements">Future Improvements</h2>
<ul>
<li>I was really interested in doing all of this from the Linux command line, so there are no instructions for Windows. I know a Windows version of CDRDAO exists, so best of luck translating these instructions to Microsoft-ese, Windows users!</li>
<li>I also eventually want to modify the wav converter to work with files other than m4a.</li>
</ul>
<h3 id="small-aside">Small Aside</h3>
<p>A few people claim that CD sound quality is bad, 44.1 kHz music isn&rsquo;t high-res enough,
and that <em>they</em> can hear the difference between low and high bitrate music.
While this indeed used to be the case (with <em>extremely</em> low bitrate music), it is no longer true.
Don&rsquo;t believe me? Check out <a href="https://www.soundguys.com/high-bitrate-audio-is-overkill-cd-quality-is-still-great-16518/">this article</a>!</p>
]]></content>
		</item>
		
		<item>
			<title>Echo-Matic Deluxe (Part 1): Marantz-based DIY Tape Echo</title>
			<link>https://ethan-cope.github.io/posts/echo-matic_special/</link>
			<pubDate>Fri, 15 Oct 2021 13:07:50 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/echo-matic_special/</guid>
			<description>Back in 2019, I saw the influential space-rock group Wand live. It was an amazing set of mostly new tunes, but I was a tad distracted by their lead guitarist. He was fiddling with a battered green box for the whole set, and doing so sent his guitar part soaring over the rest of the band in the most atmospheric, gooey wash imaginable. This was my first introduction to the weird, wonderful world of tape echo, and I wanted one!</description>
			<content type="html"><![CDATA[<p><img src="https://img.audiofanzine.com/images/u/product/normal/roland-re-201-space-echo-6085.jpg" alt="thing"></p>
<p>Back in 2019, I saw the influential space-rock group <a href="https://www.youtube.com/watch?v=h9PcHA5Ievk">Wand</a> live.
It was an amazing set of mostly new tunes, but I was a tad distracted by their lead guitarist.
He was fiddling with a battered green box for the whole set, and doing so sent his guitar part soaring over the rest of the band in the most atmospheric, gooey wash imaginable.
This was my first introduction to the weird, wonderful world of tape echo, and I wanted one!</p>
<p>Sadly, vintage tape echoes (such as the Roland RE201 Cory was using that night) go for
<em><strong><a href="https://reverb.com/p/roland-space-echo-re-201">thousands</a></strong></em>
on the used market, and are notoriously finnicky to maintain.
Cheaper digital emulations unsurprisingly fail to capture the warm, fuzzy magic of these complex analog devices.
But one day I stumbled on a <a href="https://www.youtube.com/watch?v=ABU-psBnmxk">youtube video</a> demonstrating a DIY tape echo built from nothing more than a few analog components and a tape deck, and I knew I had to make one!</p>
<h2 id="the-theory">The Theory</h2>
<p>Conceptually, tape echo is pretty simple. Consider a tape deck with 3 heads: a record head, a monitor head, and an erase head.
When recording on a 3-head deck, the signal that&rsquo;s just been recorded to the tape by the record head is captured and sent out via the playback head.
But when you send this monitor output signal directly back into the line-in jack, a feedback loop is created,
and your original sound is repeated.
From there, all you need are controls!</p>
<ul>
<li>Varying the speed of the tape deck motor changes the speed of the tape, which in turn controls the delay time.</li>
<li>Adding a resistance in the feedback loop controls the amount of signal fed back into the unit, which in turn varies the number of delay repeats.</li>
<li>Add a potentiometer to control the wet/dry mix and a volume output knob, and you have a tape delay!</li>
</ul>
<h2 id="the-circuit">The Circuit</h2>
<p>The circuit I&rsquo;m utilizing is a modified version of <a href="https://proto-schlock.blogspot.com/2015/04/echo-matic-diy-tape-delay.html">Proto-Schlock&rsquo;s</a>, who in turn got it from Boscorelli&rsquo;s <em>the StompBox Cookbook</em>.</p>
<ul>
<li>My most notable modification is the addition of a reverb module from BYOC, to simulate the orginal RE201 unit&rsquo;s spring reverb. If you don&rsquo;t want to do this, just connect <code>TO_RV</code> and <code>FROM_RV</code> with a jumper wire.</li>
<li>I also added a low-pass filter to the feedback loop, since high frequencies tend to make my unit self-oscillate.
you should experiment with different filters and filter designs here!</li>
</ul>
<figure class="big"><img src="schematic.png"
         alt="image"/><figcaption>
            <p>the modified schematic</p>
        </figcaption>
</figure>

<h2 id="the-materials">The Materials</h2>
<p>Ebay is a wonderful place. One where you can get a late 70&rsquo;s 3-head stereo tape recorder for $40 + shipping.
These old Marantz 3-head decks still have a pretty devoted following, so this unit was an absolute steal!
I already had a DIY spring reverb pedal from <a href="https://buildyourownclone.com/">BYOC</a> lying around, which would emulate the gooey reverb of the original unit without having to buy a separate reverb tank.
The rest of the parts for this project were relatively easy to source at <a href="https://smallbear-electronics.mybigcommerce.com/">Small Bear</a>, my go-to for quality guitar pedal components. I&rsquo;ve included a BOM for the project in the Github Repo.</p>
<h2 id="the-build">The Build</h2>
<h3 id="prototyping">Prototyping</h3>
<p>After acquiring all the parts, it was prototyping time!</p>
<figure><img src="breadboard1.jpeg"
         alt="image"/><figcaption>
            <p>not the cleanest, I&rsquo;ll be the first to admit</p>
        </figcaption>
</figure>

<p>Despite the circuit&rsquo;s complexity, breadboarding wasn&rsquo;t all that bad.
I hooked it up to the tape deck and&hellip; it worked! In retrospect, I&rsquo;m really glad I tested this on the breadboard first.
Doing so let me experiment with a few different high-pass filter designs before I decided on the one in the schematic.</p>
<h3 id="motor-control">Motor Control</h3>
<p>Next step: modifying the motor controller. Some tape units have this functionality built-in, but mine didn&rsquo;t. to work around this, I coupled the motor to it&rsquo;s power source via a PWM controller.
It&rsquo;s ideal to have this PWM frequency above the audio range (greater than 20 kHz).</p>
<p>or&hellip; at least it would. For some reason, my PWM controllers didn&rsquo;t want to play nice with the tape deck&rsquo;s motor.
I ended up going the analog route of putting a potentiometer inline with the motor to control the motor speed.
Every motor is different, but mine stalled at any resistance over 50 Ohms.</p>
<figure class="right"><img src="board.png"
         alt="image"/><figcaption>
            <p>the finished board</p>
        </figcaption>
</figure>

<h3 id="manufacturing">Manufacturing</h3>
<p>Finally, it was time to manufacture.
If you want to make this project yourself, I&rsquo;ve provided the Autodesk Eagle .brd files in the Github repo. Note that this is the first time I&rsquo;ve designed a pcb, so it may not be perfect! I manufactured it with <a href="https://aisler.net/">Aisler</a>,
and only paid $10 for 3 boards!</p>
<h2 id="part-1-thoughts">Part 1 Thoughts</h2>
<p>It&rsquo;s going to be a while before I get back on this project.
Aisler takes about a month to manufacture, and junior year is starting up. Stay tuned for a part 2!</p>
]]></content>
		</item>
		
		<item>
			<title>Buswarn: RasPi-based Transit Bus Tracking</title>
			<link>https://ethan-cope.github.io/posts/buswarn/</link>
			<pubDate>Mon, 27 Sep 2021 12:53:34 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/buswarn/</guid>
			<description>Public transportation is like a magnifying glass that shows you civilization up close. ~ Chris Gethard
 What is Buswarn? During the COVID year, I moved off-campus. I didn&amp;rsquo;t realize at the time, but my only lifeline to my in-person classes, study rooms, and meals would be the Texas A&amp;amp;M Bus Transit System. Problems manifested themselves quickly. Buses ran at seemingly random intervals, and the website that displayed the schedule often had errors rendering on my mobile phone.</description>
			<content type="html"><![CDATA[<blockquote>
<p>Public transportation is like a magnifying glass that shows you civilization up close. ~ Chris Gethard</p>
</blockquote>
<h2 id="what-is-buswarn">What is Buswarn?</h2>
<p>During the COVID year, I moved off-campus. I didn&rsquo;t realize at the time, but my only lifeline to my in-person classes, study rooms, and meals would be the Texas A&amp;M Bus Transit System.
Problems manifested themselves quickly. Buses ran at seemingly random intervals, and the website that displayed the schedule often had errors rendering on my mobile phone.
What I needed was a simple device that displayed how many minutes I had to wait until the next bus arrived at my apartment.
This device wouldn&rsquo;t require me to have the foresight of googling the schedule and doing mental math to determine what time to leave my apartment in order to make the next bus.
Armed with these design goals, I set to work with a Raspberry Pi and few 7-segment displays I had lying around.</p>
<h2 id="design">Design</h2>
<p>Here&rsquo;s the birds-eye view of how the code works.</p>
<ol>
<li>Download the schedule website for the desired route from the internet every morning</li>
<li>Process the timetable, and generate a list of times buses will arrive at my bus stop</li>
<li>Compare the current time with next bus arrival time, and print the difference to a 7-segment display</li>
<li>Gracefully handle website outages and power cycles to the pi.</li>
<li>Turn the pi off at the end of the day and repeat</li>
</ol>
<h2 id="implementation">Implementation</h2>
<p>Buswarn was written in Python, and I have bits of it written in C in case I want to implement it on a Arduino later down the road.</p>
<ul>
<li>I wanted to use this as an opportunity to bone up on my HTML skills, and ended up using the BeautifulSoup library to parse the HTML table into a Python array.</li>
<li>The LCD is controlled by a custom Python library that can be used on using on future projects.</li>
<li>This is the first project I&rsquo;ve developed entirely remotely through SSH on a headless machine.</li>
</ul>
<figure class="big"><img src="operation.gif"
         alt="image"/><figcaption>
            <p>prototype working fine!</p>
        </figcaption>
</figure>

<h2 id="constraints-and-challenges">Constraints and Challenges</h2>
<p>This project&rsquo;s main challenge was writing an extremely resilient program that could be left to run without breaking for extended periods of time.
In practice, this meant handling a <strong>LOT</strong> of edge cases.
For example, on football game days the website I pulled information from was essentially offline.
Handling these edge cases individually offered me total control over the program&rsquo;s stability. It&rsquo;s been running for a few months now with no errors whatsoever!
Here&rsquo;s the <a href="https://github.com/ethan-cope/pybuswarn">Github Repo</a>.</p>
<h2 id="future-changes">Future Changes</h2>
<p><em>in order from least to most difficult to implement</em></p>
<ul>
<li>The Nokia 5110 display suits this project much better than 7-segments.
The 5110 is a 84x48 px lcd display with a backlight, which consumes less power and is much more visible in high-brightness environments.
I&rsquo;ve been having problems getting it to work on the Pi, so it&rsquo;s currently on the drawing board.</li>
<li>A classic engineering problem: it works, but it&rsquo;s not exactly pretty. even a 3d printed enclosure would go a long way to make it more presentable.</li>
<li>I&rsquo;d love to eventually build these as low-power self-contained nodes in a LORA mesh. This would allow these stations to be installed at any bus station that has sunlight, no internet or power required.
I&rsquo;ll explore this possibility when I delve more into my self-contained LORA mesh project.</li>
</ul>
<h2 id="final-words">Final Words</h2>
<p>This project taught me loads about building a program to an incredibly high reliability standard, and directly influenced my development mindset when tackling programming challenges at Stanley Black &amp; Decker.</p>
]]></content>
		</item>
		
	</channel>
</rss>
