<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hey, I&#39;m Ethan.</title>
		<link>https://ethan-cope.github.io/posts/</link>
		<description>Recent content in Posts on Hey, I&#39;m Ethan.</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 31 Jul 2023 01:00:07 -0500</lastBuildDate>
		<atom:link href="https://ethan-cope.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Japan&#39;s Early-2000&#39;s Architectural Nostalgia</title>
			<link>https://ethan-cope.github.io/posts/japanarch/</link>
			<pubDate>Mon, 31 Jul 2023 01:00:07 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/japanarch/</guid>
			<description>The architectural definition of &amp;ldquo;modern&amp;rdquo;1 has always been a moving target. Every year, once &amp;ldquo;stylistically cutting-edge&amp;rdquo; buildings slip into the realm of &amp;ldquo;dated&amp;rdquo; and &amp;ldquo;cliche&amp;rdquo;. And the other day, I finally stumbled on across a building that proved this point. Nagoya&amp;rsquo;s Sasashima-Ribu station is totally representative of a particular architectural style; one that, at the time of it&amp;rsquo;s construction, was synonymous with &amp;ldquo;modern architecture&amp;rdquo;. But a quarter of a century has separated innovation from trend, revealing a slew of early 2000&amp;rsquo;s quintessential quirks.</description>
			<content type="html"><![CDATA[<p>The architectural definition of &ldquo;modern&rdquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> has always been a moving target.
Every year, once &ldquo;stylistically cutting-edge&rdquo; buildings slip into the realm of &ldquo;dated&rdquo; and &ldquo;cliche&rdquo;.
And the other day, I finally stumbled on across a building that proved this point.
Nagoya&rsquo;s Sasashima-Ribu station is totally representative of a particular architectural style; one that, at the time of it&rsquo;s construction, was synonymous with &ldquo;modern architecture&rdquo;.
But a quarter of a century has separated innovation from trend, revealing a slew of early 2000&rsquo;s quintessential quirks.
So let&rsquo;s examine a building that the &ldquo;architecturally modern&rdquo; has since evolved past.</p>
<p><em>Note: This post is written from a total lack of qualified architectural training. I&rsquo;m just a big fan of this architectural style, and I was surprised that I couldn&rsquo;t find a name or movement associated with it aside from catch-all &ldquo;postmodernism&rdquo;. As such, I humbly propose some interim nomenclature: &ldquo;00&rsquo;s geometric&rdquo;.</em></p>
<figure><img src="ExteriorShot.jpg"
         alt="image"/><figcaption>
            <p>Exterior view from Aichi Daigakou</p>
        </figcaption>
</figure>

<p>As a case study, let&rsquo;s take a look at the <em>Sasashima-Raibu Station</em>. At the time of it&rsquo;s construction, Aichi was hosting the environmentally-themed <em>World Expo 2005</em>.
The station itself was constructed in 2005 along with the rest of the Aonami line, which served as a transportation link to the expo&rsquo;s campus. Being built for such a high-profile event, The station&rsquo;s architecture is truly a &ldquo;greatest hits&rdquo; of 00&rsquo;s geometric themes.
Simple shapes define the station&rsquo;s facade. A shed-style roof covers the main station building, which complements the symmetrical, arched walkway coverings.
Only the elevator shaft is square; the rest of the design is dominated by swooping contours and shallow angles, evoking (to me) themes of rolling waves.
Gentle curves are a common theme that starkly contrasts to the imposing, rigid facades of modernist or brutalist buildings.
In fact, 00&rsquo;s geometric structures often seem friendly and inviting, despite being built with similar materials as their modernist counterparts.</p>
<figure><img src="platformWithBuilding.jpg"
         alt="image"/><figcaption>
            <p>View from platform 1</p>
        </figcaption>
</figure>

<p>Let&rsquo;s dig a little further into these materials. 00&rsquo;s geometric buildings mainly utilize plate glass and steel, but in unexpected ways.
You see, gentle curves are very difficult to achieve using plate glass, because it doesn&rsquo;t bend easily. For this reason, modernist structures are often massive boxes of steel and glass.
00&rsquo;s Geometric buildings, on the other hand, seek to defy the limitations of their medium.
Smaller panels of glass are arranged to create low-resolution curves. Steel is bowed into gentle arcs, purely for the sake of adornment.
There is a sense of techno-utopianism in these structures: we have the technology to bend steel and glass to our will: not to improve function, but for form alone.
While Sasashima-raibu&rsquo;s view from platform 1 sports numerous examples of this, I think this style is best exhibited by Itsuko Hasegawa&rsquo;s work.
For example, <em>Ryutopia Performing Arts Center</em> utilizes segments of floor-to-ceiling plate glass to create a (some would argue superfluously) circular arena.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<figure><img src="ryutopia.jpg"
         alt="image"/><figcaption>
            <p>Hasegawa&rsquo;s Ryutopia Performing Arts Center</p>
        </figcaption>
</figure>

<p>While undoubtedly striking, steel and plate glass aren&rsquo;t particularly &ldquo;welcoming&rdquo;. Using these materials alone, buildings could come off as clinical or intimidating.
To compensate, 00&rsquo;s Geometric structures utilize vibrant, bold hues on seemingly normal objects.
Just take a look at the elevator passageway at Sasashima-raibu station: the entire elevator shaft is painted a royal blue, which complements the purple of the right-hand lighting nicely. Even the subway line&rsquo;s trademark color is a shade of deep teal. Imagine this hallway without those splashes of color!  Beautiful, sure, but nonetheless bleak and lifeless. Primary-school pigmentation gives the station a sense of openness and friendliness, which can make an otherwise unfamiliar subway station feel less intimidating.</p>
<figure><img src="ElevatorColorSplash.jpg"
         alt="image"/><figcaption>
            <p>Outdoor elevator passageway</p>
        </figcaption>
</figure>

<p>All of the above points stand in direct contrast with Modernism. Where Modernist buildings seek to impose, 00&rsquo;s Geometrics seek to invite. Stoic, rigid materials are bent and stretched beyond their limits to create simple geometric shapes. Splashes of color invite people to engage with the building&rsquo;s space, while simultaneously rejecting the stodgy shackles of Modernism. This is the architecture of the early 2000&rsquo;s, where change was right around the corner. The Cold War was over, and large-scale peace seemed to be working. The internet was promising to connect everyone and everything. All of the world&rsquo;s problems seemed to be imminently solvable by technology, which would accelerate humanity&rsquo;s progress towards a brighter tomorrow.
We built the buildings of this imminent, techno-utopian future, and 00&rsquo;s Geometric was the result.
While that future never came, these silly, optimistic buildings remain a testament of the era&rsquo;s bright-eyed enthusiasm.
Every time I see one, I&rsquo;m reminded that the future doesn&rsquo;t have to be bleak. Not too long ago, the sky wasn&rsquo;t falling.</p>
<h2 id="more-examples">More Examples</h2>
<p><figure><img src="BuildingInterior.jpg"
         alt="image"/><figcaption>
            <p>Sasashima-raibu Station (2005. Nagoya, JP)</p>
        </figcaption>
</figure>

<figure><img src="jeb.jpg"
         alt="image"/><figcaption>
            <p>Jack E. Brown building (2005. College Station, TX)</p>
        </figcaption>
</figure>

<figure><img src="o21.jpeg"
         alt="image"/><figcaption>
            <p>Oasis21 Bus Terminal (2002. Nagoya, JP)</p>
        </figcaption>
</figure>

<figure><img src="bdome.png"
         alt="image"/><figcaption>
            <p>Battle Dome (2002. Fictional, Pokemon Ruby/Sapphire)</p>
        </figcaption>
</figure>
</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Note: Here, I&rsquo;m using the word &ldquo;modern&rdquo; to refer to buildings that the average person would consider high-tech or new. This is unrelated to the architectural movement of Modernism.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Image credit <a href="https://alg.jp/en/work/ryutopia/">here</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>Japan&#39;s Most Iconic Model Cars Come Out Of Vending Machines</title>
			<link>https://ethan-cope.github.io/posts/gacha/</link>
			<pubDate>Fri, 14 Jul 2023 01:00:15 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/gacha/</guid>
			<description>Remember those 25-cent gumball machines? The ones where you could trade a quarter for a gumball older than the dotcom crash? Imagine that, but instead of a chunk of crusty candy, you win a random 1/64th scale model car. That&amp;rsquo;s essentially Gachapon!
Bandai Namco&amp;rsquo;s toy vending machines are addictively simple. Insert cash (1), twist dial (2), and collect model (3). Since the 1970&amp;rsquo;s, Gachapon machines have dispensed billions of anime figurines, sushi keychains, and (most notably), tiny scale vehicles.</description>
			<content type="html"><![CDATA[<p>Remember those 25-cent gumball machines?
The ones where you could trade a quarter for a gumball older than the dotcom crash?
Imagine that, but instead of a chunk of crusty candy, you win a random 1/64th scale model car.
That&rsquo;s essentially Gachapon!</p>
<figure class="left"><img src="machExample.jpg"
         alt="image"/>
</figure>

<p>Bandai Namco&rsquo;s toy vending machines are addictively simple.
Insert cash <strong>(1)</strong>, twist dial <strong>(2)</strong>, and collect model <strong>(3)</strong>.
Since the 1970&rsquo;s, Gachapon machines have dispensed billions of anime figurines, sushi keychains, and (most notably), tiny scale vehicles.
For vehicle Gacha, each machine is dedicated to a specific make and model.
Certain things are randomized: you may win one with a body kit, rare paint color, or a specific trim level.
Whole subcultures exist around the trading and collecting of these tiny models.
When I first came to Japan, it didn&rsquo;t take long for these miniature machines to steal my heart - I was hooked!</p>
<p>I was most surprised by the sheer variety of models offered in the Gacha parlors.
Of course, sports cars and big trucks were well represented.
But some of the most popular machines were stocked with weirder, less well-known vehicles.
I started to wonder: what made those cars special enough to warrant a dedicated Gacha machine?
Was there really that much demand for a toy machine that only dispenses minivans?
The more I dove down the rabbit hole of fan sites and forums, the more I learned about the unique history of each of these cars.
In one way or another, each of these vehicles are icons of Japanese car culture &ndash; not because of their performance or styling, but because of their <em>stories</em>.
So here are the stories behind Japan&rsquo;s most iconic cars, and why they&rsquo;re worth your gumball money.</p>
<h2 id="nissan-cima-1988-1990">Nissan Cima (1988-1990)</h2>
<figure class="right"><img src="cimamach.jpg"
         alt="image"/>
</figure>

<p>Why did no one tell me about Nissan&rsquo;s late-80&rsquo;s rear-wheel-drive luxobarge?
At a colossal (for Japan) 193 in long, the Nissan Cedric/Gloria Cima was almost as big as a Lincoln Continental!
Why did Nissan only sell this tank in Japan, where big vehicles are taxed to oblivion?</p>
<p>Given it&rsquo;s economic context, the Cima starts to make sense.
In the late 80&rsquo;s, Japan was in a period known as the <em>baburu keiki</em> (bubble economy).
During this time, the yen was strong and interest rates were low.
Many used this opportunity to invest in real estate, which <a href="https://internationalbanker.com/history-of-financial-crises/japans-lost-decade-1992/">drove investment asset prices up nationwide.</a>
More growth meant more disposable income, and what better way to flex your wealth than an absurdly expensive car?
Investors with newfound cash flocked to the Cima: over 35,000 found a home in it&rsquo;s first model year alone!
The Cima&rsquo;s popularity was so shocking that period media invented the term <a href="https://www.japantimes.co.jp/news/2022/03/31/business/corporate-business/nissan-cima-discontinued/">&ldquo;Cima Phenomenon&rdquo;</a> to describe Japan&rsquo;s increasing obsession with luxury autos.</p>
<p>The Cima was the ultimate JDM baller car for a few reasons.
In Japan, wheelbase and displacement taxes make it expensive to own anything larger than a kei car.
As a result, big vehicles carry some <em>serious</em> clout.
To capitalize on this, the Cima was built <a href="https://www.curbsideclassic.com/curbside-classics-asian/curbside-classic-1988-nissan-gloria-cima-fpy31-type-ii-limited-an-infinitely-better-version-of-the-infiniti-beta-version/">as large as legislation would allow</a>, making it one of the first Japanese &ldquo;super-sedans&rdquo;.
The Cima complimented this imposing size with cutting-edge tech.
Features like a <a href="https://www.nissan-global.com/EN/HERITAGE/cedric_cimatype_ii_limited.html">twin-cam turbo V6, an integrated CRT television, and electronic air suspension</a> all added to the Cima&rsquo;s hyper-luxury image.
Technology was the Cima&rsquo;s main selling point against it&rsquo;s bitter rival, the Toyota Crown.
While the Crown&rsquo;s legacy far outstrips the Cima&rsquo;s, Nissan&rsquo;s first super-sedan carries clout even today.
Otherwise there wouldn&rsquo;t be a gacha machine dedicated to it!</p>
<h2 id="autozam-az-1-1992-1994">Autozam AZ-1 (1992-1994)</h2>
<figure class="left"><img src="az1mach.jpg"
         alt="image"/>
</figure>

<p>Let&rsquo;s set the scene: It&rsquo;s 1992. You&rsquo;re a middle-class Japanese salaryman who just got a bonus. What subcompact sports car do you buy?
Autozam aimed to answer this question with the absolutely insane, no-holds-barred AZ-1.</p>
<p>Unveiled at the 1989 Tokyo Motor Show, the production AZ-1 was originally a Suzuki project, abandoned and sold to Mazda.
The AZ-1&rsquo;s design was nuts, even for the time.
The original prototype <a href="https://www.asahi-net.or.jp/~LE9S-ICKW/e/e_histry_2.html">even had pop-up headlights</a>, which were only removed for structural reasons.
All the more surprising that the designer, Toshihiko Hirai, was designing the (comparatively reserved) MX-5 around the same time.
Imagine a world with a crazy gull-wing doored, mid-engine Miata!</p>
<p>This design wasn&rsquo;t just for weirdness&rsquo; sake: it was the AZ-1&rsquo;s biggest selling point.
In the <em>baburu keki</em> period, kei-class sports cars were set to become <a href="https://www.hagerty.com/media/market-trends/with-quirky-kei-cars-its-easy-as-a-b-c/">a major battlefield</a> for automakers.
Average people finally had enough money to own a car, and automakers wanted in on that budget-conscious-ballin&rsquo; money.
But when your competitors are also limited to 66 horsepower, your vehicle needs a way to distinguish itself.
The Honda Beat was the first kei sportscar to market, and it was a mid-engine drop-top making almost 100 hp / liter. <em>naturally aspirated, in 1991!</em>
Five months later, Suzuki unveiled the Cappuccino, which one-upped the Beat with <strong>double</strong> the number of roof configurations.
The Cappuccino could switch between a T-top, targa, hardtop, or convertible at the owners&rsquo; whim!
Between these two pint-sized sportscars, the AZ-1 had some stiff competition in the quirkiness department.</p>
<p>Sadly the AZ-1&rsquo;s weridness wasn&rsquo;t enough to sell.
The bubble economy popped in late 1991, when Tokyo real estate prices collapsed from their record highs.
By 1992, the average person could barely afford <em>any</em> car, much less an impractical one.
The same quirks that made the AZ-1 so desirable as a fun car made it nigh-unsellable as a daily driver.
Critics derided the gull doors for eating into an already cramped interior.
It&rsquo;s mid-engine layout meant no trunk, and the tiny frunk could barely fit a donut spare.
Mazda didn&rsquo;t even come close to it&rsquo;s sales target of 800 units per month, and by 1994, the AZ-1 was dead.
And yet, it&rsquo;s legacy lives on in Gashapon machines and the hearts of short-statured enthusiasts everywhere!</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="az1frontquarter.jpg" alt=""></th>
<th style="text-align:center"><img src="az1front.jpg" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>front quarter view</em></td>
<td style="text-align:center"><em>front view</em></td>
</tr>
</tbody>
</table>
<h2 id="subaru-360-1958-1971">Subaru 360 (1958-1971)</h2>
<figure class="left"><img src="subarumach.jpg"
         alt="image"/>
</figure>

<p>Often compared to the VW beetle, the Subaru 360 was the first true &ldquo;people&rsquo;s car&rdquo; of Japan.
After World War 2, Japan wanted to incentivize people and small businesses to get on the road.
In 1949 it created the Kei segment - a special class of subcompact car with small engines and smaller dimensions, all encouraged by lenient tax breaks.
While many automakers tried, the first successful vehicle in the kei segment was <a href="https://www.autoevolution.com/news/history-of-the-japanese-kei-car-49720.html">none other than the Subaru 360</a>.
On paper, the 360 was nothing special.
It&rsquo;s two-stroke, rear mounted engine only put out a 25 hp, and weighed only <a href="https://www.hemmings.com/stories/article/a-small-start-for-something-big-1969-subaru-360">925 lbs</a>.
But a combination of radical efficiency (66 mpg advertised!) and distinctive styling made the 360 a success in its home market.
But stateside, the 360 had an entirely different reception.</p>
<p>You may know Malcom Bricklin from his <a href="https://www.petersen.org/blog/bricklin">Yugo-importing</a> and safety-centric-sport-coupe designing fame.
But in the late 60&rsquo;s, he also founded Subaru of America to compete with the VW-dominated budget segment.
Cheaper and more efficient than the VW Beetle, the 360 seemed destined for success in the US.
But a jaded review from Consumer Reports unfairly derided the 360 for slow acceleration and lackluster safety.
One quote <a href="https://www.mysubaru360.com/manuals_and_documents/Subaru_360_Consumer_Reports_April_69.pdf">reads</a>: <em>&ldquo;The Subaru ate up almost half a minute in accelerating for 30 mph to 50 mph. That&rsquo;s a lot of time to spend on the wrong side of a two-lane road, should one ever try to pass another car.&rdquo;</em>
As if any sane 360 driver would try passing in an oncoming lane!
Unfortunately, this short-sighted review irreparably damaged public perception of the Subaru.
360s languished on dealer lots, until years of slow sales eventually killed Bricklin&rsquo;s licensing deal in 1971.
Maligned in the States, the Subaru 360 is nonetheless celebrated across the Pacific.
Today, &ldquo;the ladybug&rdquo; is still seen as a symbol of Japan&rsquo;s technical and societal reconstruction after the destruction of WWII.
$3.50 was a steal for this replica of Japanese car culture&rsquo;s roots!</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="subaruparts.jpg" alt=""></th>
<th style="text-align:center"><img src="subarufront.jpg" alt=""></th>
<th style="text-align:center"><img src="subaruback.jpg" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>parts assembly</em></td>
<td style="text-align:center"><em>front quarter view</em></td>
<td style="text-align:center"><em>rear view</em></td>
</tr>
</tbody>
</table>
<h2 id="nissan-s-cargo-1989-1991">Nissan S-Cargo (1989-1991)</h2>
<figure class="left"><img src="scargomach.jpg"
         alt="image"/>
</figure>

<p>If you thought retro-styling was a uniquely 21st century trend, think again.
At the height of the bubble era, Nissan unveiled not one, not two, but <a href="https://web.archive.org/web/20160703050240/http://www.nissan-global.com/EN/HERITAGE/s_cargo_230.html"><em>FOUR</em> retro-styled cars.</a>
Of these, two were regular compacts, one was a roadster, and one, the S-Cargo, was a <strong>delivery van</strong>!
When it went out of production in 1991, retro-styled work van enthusiasts had to wait seventeen years for HHR Panel to pick up the torch!
Predicting the retro-styling trend by multiple years, the S-Cargo&rsquo;s success proved that style sometimes trumps substance.</p>
<p>While their appearance sometimes inspires laughter, Nissan&rsquo;s Pike cars always seemed in on the joke to me.
Even the name &ldquo;Pike Car&rdquo; is a pun, as the venture was meant to &ldquo;<a href="https://www.nissan.ph/experience-nissan/design/nissan-pike-cars.html">spearhead new, cutting edge design</a>&rdquo;.
But instead of looking to the future for inspiration, Nissan turned to the past.
Their search brought them to Naoki Sakai, a Japanese designer with a background in fashion.
Sakai described his design mentality as follows, &ldquo;car designers are highly elite and only look at the future and evolution of cars&hellip; [but] Fashion design goes back and forth freely&rdquo;.
Nissan applied this philosophy to car design, resulting in the first pike car &ndash; the Be-1.</p>
<p>The Be-1&rsquo;s popularity could not be overstated.
At the car&rsquo;s public unveiling, Sakai recalled hearing the same two words over and over: <a href="https://www.figaroownersclub.com/naoki-sakai-figaro-designer/"><em>kawaii</em> (cute) and <em>hoshii</em> (I want it).</a>
Nissan stirred the pot further by announcing that the Be-1 would only be sold for one year.
This hype translated directly into sales success - Nissan had to implement a lottery system since demand outstripped supply by <a href="https://web.archive.org/web/20181224092117/http://autozine.org/Archive/Nissan/classic/Be1.html">10 to 1</a>.
This unexpected success led to more Pike cars - the safari-styled Pao, the retro roadster Figaro, and of course, the mollusk motorcar S-Cargo.</p>
<p>Unlike the Be-1, I can guarantee that there was no prior demand for a snail-themed delivery van.
No one was beating down the doors of Nissan&rsquo;s corporate HQ, bemoaning the absence of invertibrate-themed work vehicles.
But Nissan built the S-cargo anyway, and they didn&rsquo;t mail it in.
The S-Cargo was available with a <a href="https://web.archive.org/web/20160322051842/http://www.nissan-global.com/EN/HERITAGE/s_cargo_120.html">canvas folding roof</a>, presumably for those extra-tall deliveries.
It also featured a removable sushi tray and snail-themed mud flaps.
Powertrain-wise, it was essentially a Nissan Pulsar, which meant a wheezy <a href="https://web.archive.org/web/20181224092117/http://autozine.org/Archive/Nissan/classic/Be1.html">1.5L inline-4 and a 3-speed automatic.</a>
I also can&rsquo;t imagine that the downward-sloping roofline helped cargo capacity, but Nissan claims<a href="https://web.archive.org/web/20160703050240/http://www.nissan-global.com/EN/HERITAGE/s_cargo_230.html"> &ldquo;the high roof of the cargo area was especially popular&rdquo;.</a>
Maybe I don&rsquo;t get the hype - if you want an iconic Japanese delivery vehicle, there&rsquo;s a much more obvious choice&hellip;
<em>parts assembly</em> | <em>front quarter view</em>  |  <em>side view</em></p>
<h2 id="honorable-mention-ae86-corolla">Honorable Mention: AE86 Corolla</h2>
<figure class="right"><img src="ae86mach.jpg"
         alt="image"/>
</figure>

<p>If there&rsquo;s a single vehicle that <em>had</em> to be on this list, it&rsquo;s this one.
The AE86 Toyota Sprinter Trueno is an uncontested motorsports icon.
You may know it as Le Mans victor Keiichi Tsuchiya&rsquo;s vehicle of choice.
Or maybe <a href="http://www.tunedph.com/thanks-initial-d-elements-car-culture-influenced-cartoon">Initial D</a> was your gateway drug to the world of auto enthusiasm.
From these sources, the 86 has gained a reputation for being the ultimate drift machine.</p>
<p>But even in it&rsquo;s time, AE86 Trueno Sprinter was&rsquo;t the most powerful or best handling car.
Before the drifting scene took off, it was seen as &ldquo;<a href="https://www.motorbiscuit.com/tofu-eurobeat-and-drifting-how-the-toyota-ae86-corolla-inspired-the-86/">just another used cheap, reliable &hellip; car</a>&rdquo;.
But these pedestrian origins actually <em>contributed</em> to the 86&rsquo;s popularity.
Intended for fuel savings, the lightweight body and near 50/50 weight distribution also gave the 86 superb handling characteristics.
While it&rsquo;s 1.6 liter 4-cylinder was underpowered, especially compared to other drift machines, this forced AE86 drivers to learn good driving technique.
Because of these characteristics, &ldquo;Drift King&rdquo; Keiichi Tsuchiya famously stated, &ldquo;[t]he 86 helps you become a better driver.&rdquo;
The 86 may not have been the most performant drift car, but it was the right car at the right time.</p>
<h2 id="suzuki-jimny-2018-present">Suzuki Jimny (2018-Present)</h2>
<figure class="left"><img src="jimnymach.jpg"
         alt="image"/>
</figure>

<p><strong>&ldquo;LIFE IS JIMNY&rdquo;</strong> Boldly proclaims this Gachapon machine. Who am I to argue?
I had assumed that displacement and wheelbase taxes would make off-roaders a rare sight in Japan.
But I&rsquo;ve been pleasantly surprised by the number of Land Cruisers, Wranglers, and overlanding Tacomas I&rsquo;ve seen here!
And of course, Jimnys. Lots of Jimnys.</p>
<p>Let&rsquo;s back up for a second, though. What is a Jimny? Where did the name come from?
The most popular hypothesis claims that Jimny is a <a href="https://www.masterclass.com/articles/spoonerism-explained">spoonerism</a> of &ldquo;Jeep&rdquo; and &ldquo;mini&rdquo;.
While Suzuki themselves apparently <a href="https://www.news24.com/life/motoring/bakkies-suvs/bakkie_and_suv/at-last-the-truth-behind-the-suzuki-jimny-name-tag-20201210-2">support this view</a>, many believe other theories.
Some claim that Jimny is a reference to Jiminy Cricket, Pinocchio&rsquo;s upbeat, insectoid conscience.
Still others argue that Jimny stems from translating &ldquo;Gemini&rdquo; to Japanese phonetics.
Just like the Willys Jeep, the Jimny name debate has been raging for decades, and shows no sign of stopping now.</p>
<p>Name controversy aside, the story of what would become the Jimny begins in the late 1960&rsquo;s.
Cars like the Subaru 360 made driving accessible for more people, but only in places with good infrastructure.
Suzuki saw a gap in the market for a kei-class car focused solely on off-road capability.
Such a vehicle would have the utility of a much larger truck, but be cheaper to own and run.
The first Jimny was built in 1970 to take a chance on this promising market.
As it turned out, demand for capable, budget vehicles was massive!
Since it&rsquo;s release the 70&rsquo;s, Jimnys flew off of (metaphorical) shelves, kickstarting the popular of 4WD kei car segment in Japan.</p>
<p>The spirit of the budget off-roader continues in the modern, fourth generation Jimny.
The 2018 model has a relatively simple mechanical part-time 4WD system, a feature of the Jimny since the first generation.
Clever parts sharing also keeps the costs down.
The JDM Jimny is offered in both the kei class and the larger &ldquo;compact&rdquo; class.
But if you look closely at <a href="https://www.suzuki.co.jp/release/a/2022/0620/">Suzuki&rsquo;s press photos</a>, it&rsquo;s obvious that the compact is just the kei model with a larger engine and bigger fender flares.
This modularity makes the Jimny a common choice for overlanding builds, which seem just as popular in Japan as in the states.
The Gacha model actually came with multiple bumpers, so you can choose whether you want a bone-stock Jimny or a rock-crawling powerhouse!</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="jimnyparts.jpg" alt=""></th>
<th style="text-align:center"><img src="jimnyfront.jpg" alt=""></th>
<th style="text-align:center"><img src="jimnyback.jpg" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>parts assembly</em></td>
<td style="text-align:center"><em>front quarter view</em></td>
<td style="text-align:center"><em>rear 3/4 view</em></td>
</tr>
</tbody>
</table>
<p>That&rsquo;s it for the roundup! There were a few more vehicles I wanted to get to - but if I don&rsquo;t end this somewhere I never will.
Thanks for bearing with the diversion from my usual format, and let me know if you&rsquo;re interested in more articles like this!</p>
]]></content>
		</item>
		
		<item>
			<title>🏆 Battery Recycling: The Dark Side of an All-EV Future (2nd place, Problems Worth Solving Competition 2023)</title>
			<link>https://ethan-cope.github.io/posts/pws/</link>
			<pubDate>Sun, 30 Apr 2023 17:30:30 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/pws/</guid>
			<description>You&amp;rsquo;ve got to start with the customer experience and work back toward the technology, not the other way around. ~ Steve Jobs
Last weekend I had the opportunity to participate in Problems Worth Solving: Texas A&amp;amp;M&amp;rsquo;s first and only entrepreneurship competition that outright bans solutions.
Great businesses arise from an intimate understanding of your customers&amp;rsquo; needs. PWS emphasizes this critical step of entrepreneurship by focusing entrepreneurs on the problem, not the solution.</description>
			<content type="html"><![CDATA[<blockquote>
<p>You&rsquo;ve got to start with the customer experience and work back toward the technology, not the other way around. ~ Steve Jobs</p>
</blockquote>
<p>Last weekend I had the opportunity to participate in <a href="https://engineering.tamu.edu/student-life/eep/problems-worth-solving-competition.html">Problems Worth Solving</a>:
Texas A&amp;M&rsquo;s first and only entrepreneurship competition that outright <em>bans</em> solutions.</p>
<p>Great businesses arise from an intimate understanding of your customers&rsquo; needs.
PWS emphasizes this critical step of entrepreneurship by focusing entrepreneurs on the problem, <strong>not</strong> the solution.
The competition was 5 minutes of presenting in-depth on an important problem that many face, and 5 minutes of Q&amp;A with industry judges.</p>
<p>I chose to present on EV battery recycling. Current legislation aims to get more people into Electric Vehicles for the good of the climate and the environment.
But our current solutions to recycle EV batteries are inefficient, expensive, and environmentally detrimental.
I emphasized the need solutions for battery supply chains, recycling processes, and repairability that are cost-effective and scalable.</p>
<p>The whole experience was great! I ended up getting second place with this presentation.
If you want to watch the presentation, check it out below!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/i1K0a1xEk7c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="My PWS Presentation!"></iframe>
</div>

]]></content>
		</item>
		
		<item>
			<title>A sane mini-tutorial for the Jenkins Javascript API</title>
			<link>https://ethan-cope.github.io/posts/jenkinsapi/</link>
			<pubDate>Fri, 03 Feb 2023 14:51:34 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/jenkinsapi/</guid>
			<description>Holy moly, the Jenkins documentation is bad. At the very least, it isn&amp;rsquo;t very user-friendly, especially for beginners. For someone who has little-to-no experience in web development, doing something as simple as getting some job data from a Node program is the equivalent of pulling teeth. After spending hours in rabbit holes, I finally stumbled on a configuration that works. This mini-writeup will hopefully help those webdev-challenged folks such as myself in the quest for Jenkins API usage.</description>
			<content type="html"><![CDATA[<p>Holy moly, the Jenkins documentation is bad. At the very least, it isn&rsquo;t very user-friendly, especially for beginners.
For someone who has little-to-no experience in web development, doing something as simple as getting some job data from a Node program is the equivalent of pulling teeth. After spending hours in rabbit holes, I finally stumbled on a configuration that works. This mini-writeup will hopefully help those webdev-challenged folks such as myself in the quest for Jenkins API usage.</p>
<p>My goal for this project was pulling real-time job data from Jenkins, so I won&rsquo;t dive into more advanced stuff like creating jobs and triggering builds. But the Jenkins API does support those actions, so keep that in mind.</p>
<h2 id="api-points-of-interest">API Points of Interest</h2>
<p>The Jenkins API is REST-like: information about what data you want to fetch is encoded directly into the url the fetch request is sent to. Since Jenkins doesn&rsquo;t have a list of which URLs actually contain useful data, I&rsquo;ve <del>copied</del> <strong>compiled and expanded upon</strong> <a href="https://gist.github.com/justlaputa/5634984">justlaputa&rsquo;s Github gist</a> of useful api URLs.</p>
<p><em>Note</em> that <code>jenkins_url</code> is the link to your Jenkins controller instance: it may need to include a port number as well.</p>
<ul>
<li>List all jobs on Jenkins: <code>jenkins_url</code>+<code>/api/json?tree=jobs[name,color]</code></li>
<li>List all builds for a job named <code>${job_name}</code>: <code>jenkins_url</code>+<code>/job/${job_name}/lastBuild/api/json?tree=builds[number,status,timestamp,id,result]</code></li>
<li>List last build info for a job named <code>${job_name}</code>: <code>jenkins_url</code>+<code>/job/${job_name}/lastBuild/api/json</code></li>
<li>List build progress for a job named <code>${job_name}</code>: <code>jenkins_url</code>+<code>/job/${job_name}/lastBuild/api/json?tree=result,timestamp,estimatedDuration</code></li>
</ul>
<h2 id="authentication">Authentication</h2>
<p>The Jenkins API states that it uses BASIC authentication to allow API access. There are exactly 0 examples about using BASIC authentication in the API, so I&rsquo;ve taken it upon myself to provide some sample code.</p>
<h3 id="the-api-token">The API Token</h3>
<p>To access Jenkins from an API, you&rsquo;ll have to generate an API token. To do so, click the <em>Configure</em> button under the username in the top right corner.
<figure class="big"><img src="TokenGen1.png"
         alt="image"/><figcaption>
            <p>Configure option under username</p>
        </figcaption>
</figure>

Then click <em>Add new Token</em> under the <em>API Token</em> heading.
<figure class="big"><img src="TokenGen2.png"
         alt="image"/><figcaption>
            <p>Add token Button</p>
        </figcaption>
</figure>
</p>
<p>This will generate a new token, which looks like a string of random text. Copy it somewhere safe, because you won&rsquo;t be able to see it again!</p>
<h3 id="the-code">The Code</h3>
<p>I&rsquo;m not a Javascript programmer, so I can&rsquo;t go in-depth and explain how this authentication works. But I <em>can</em> tell you that this code does work.</p>
<pre tabindex="0"><code>let JENKINS_URL = &#34;localhost:8080&#34; // replace with url of your Jenkins server
let JENKINS_UNAME = &#34;Jenkins-User&#34; // replace with username you generated token for
let JENKINS_JOB = &#34;BuildWebsite&#34;   // replace with name of job you want to pull data from
let API_TOKEN   = &#34;gobbedygook000000letters00000and0000numbers&#34; // replace with API token you generated above

function JobData(jobName){
    // fill this string with the information found in API Points of Interest
    // here, I pull information on the most recently run job.
	const url = `http://${JENKINS_URL}/job/${jobName}/lastBuild/api/json?pretty=true`

	return fetch ( url, {
        // authorization for fetch request
		method: &#34;GET&#34;,
		headers:{
			Authorization :
			&#34;Basic &#34; + 
			Buffer.from(`${JENKINS_UNAME}:${API_TOKEN}`).toString(&#34;base64&#34;)
		},

	}).then((res, req) =&gt; {
		return res.json()
        //this function returns the job information.
	})
}
</code></pre><h2 id="cross-site-request-forgery">Cross Site Request Forgery</h2>
<p>It is important to note that while Javascript can be run from both the frontend or the backend, API calls must be made from a backend to prevent <em>Cross-Site Request Forgeries.</em> So, there&rsquo;s really no way to make API calls from <code>&lt;script&gt;</code> tags embedded in an HTML file. You&rsquo;ll need to make a backend that serves the Jenkins data to the frontend, and host it on the internet (with something like <a href="https://www.heroku.com/">Heroku</a>) or locally (with <a href="https://www.phusionpassenger.com/library/walkthroughs/deploy/nodejs/">Passenger</a> or something similar).</p>
<p>That&rsquo;s pretty much it. This is a super short article, but something like this would have saved me about 10 hours of googling. Hopefully this will help some of you aspiring Jenkins-wranglers learn something new!</p>
]]></content>
		</item>
		
		<item>
			<title>Boss Pedal Switching Issues? Try This! (Boss GE-7 Modding)</title>
			<link>https://ethan-cope.github.io/posts/ge7/</link>
			<pubDate>Tue, 27 Dec 2022 15:06:31 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/ge7/</guid>
			<description>Post-Mod GE-7
The Mod If you just want to skip to the fix, head to this section.
At the advice of Brian Wampler, I caved and bought a minty used Boss GE-7. Imagine my surprise after moving any of the EQ sliders introduced very noticeable noise! How could you, Boss? Apparently, when the GE-7 was first designed, battery life and price point were more important considerations than audio fidelity. As a result, any GE-7s made from 1981 to 2017 use the TL022 dual op-amp chips.</description>
			<content type="html"><![CDATA[<figure><img src="ge7pic.jpg"
         alt="image"/><figcaption>
            <p>Post-Mod GE-7</p>
        </figcaption>
</figure>

<h1 id="the-mod">The Mod</h1>
<p>If you just want to skip to the fix, head to <a href="#the-fix">this section</a>.</p>
<p>At the advice of <a href="https://www.youtube.com/watch?v=hypn6uA6RPs">Brian Wampler</a>, I caved and bought a minty used Boss GE-7.
Imagine my surprise after moving any of the EQ sliders introduced very noticeable noise! How could you, Boss? Apparently, when the GE-7 was first designed, battery life and price point were more important considerations than audio fidelity.
As a result, any GE-7s made from 1981 to 2017 use the <code>TL022</code> dual op-amp chips. These outdated chips are surpassed in every aspect of audio performance by the more recent <code>NE5532</code> dual op-amps, despite drawing more current.
<em>(<a href="https://www.ti.com/lit/ds/symlink/ne5532.pdf">38 mA</a> vs <a href="https://www.ti.com/lit/ds/symlink/tl022.pdf?ts=1672127917081">6 mA</a> in output short-circuit condition. <a href="https://www.physics.unlv.edu/~bill/PHYS483/op_amp_datasheet.pdf">This is a good read</a> if you need a refresher on op-amp datasheet deciphering)</em>.</p>
<p>Boss also used cheapo-ceramic capacitors in the signal path of the GE-7. Ceramics can be microphonic due to the piezoelectric effect: this is possibly the worst type of non-ideality an audio component can have. Subsitituting these for film capacitors would drastically improve audio fidelity. Since my pedal was an older model, I decided to replace all of the electrolytic capacitors as well. These caps have most likely dried out after 40+ years of use.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Not in the mood to source parts for myself in the middle of a rabid chip market (Even through-hole parts are getting hard to find!), I opted for the <a href="https://fromelelectronics.com/products/ge7-mods">Fromel mod kit</a>.</p>
<p>This pedal was made back when manufacturers cared about repairability, and it shows. The GE-7 was very easy to disassemble. After socketing and soldering the new op-amps, I tried to fire the pedal up. There was no sound.</p>
<h1 id="the-problem">The Problem</h1>
<p>The broken pedal behaved as follows:</p>
<ul>
<li>If the switch was held down, the clean (bypass) signal could be heard clearly</li>
<li>If the switch wasn&rsquo;t held down, an extremely loud buzzing could be heard</li>
<li>The wet (equalized) signal could not be heard, regardless of switch position</li>
<li>The LED never turned on</li>
</ul>
<figure class="left"><img src="inside1.jpg"
         alt="image"/><figcaption>
            <p>GE-7 Gutshot</p>
        </figcaption>
</figure>

<p>The buzzing noise sounded a bit like a ground loop, which is often caused by grounding issues. Using a continuity checker, I discovered that the switch ground wasn&rsquo;t connected to the power jack&rsquo;s ground. But the pedal worked before I took it apart: what could have changed??</p>
<h1 id="the-fix">The Fix</h1>
<p>Taking a closer look at the switch grounding revealed all! See how the switch&rsquo;s ground (black wire) is attached to the output jack, and nothing else? The switch will only be grounded if output jack is attached to the enclosure. The enclosure itself needs to be grounded as well: The ground output from the 9v input connection to the input jack handles this. All this means that the pedal will only switch properly if the input and output jacks are electrically connected to (or screwed into) the enclosure! After alligator-clipping the switch ground and power jack ground together, and plugging my guitar in, it worked like a charm!</p>
<p>If you&rsquo;ve been having this issue, check 2 things:</p>
<ul>
<li>Use a continuity checker (most multimeters should have one) to see if all of the grounds are connected</li>
<li>Make sure a 1/4&quot; cable is plugged into the pedal&rsquo;s <em>input</em> jack. If nothing is plugged in, the pedal won&rsquo;t activate.</li>
</ul>
<h1 id="the-takeaway">The Takeaway</h1>
<p>While I&rsquo;ve been told to <a href="https://www.coda-effects.com/2017/07/ground-loops-and-guitar-pedals.html">always ground the enclosure</a>, this is the first time I&rsquo;ve seen an entire pedal&rsquo;s functionality rely on this rule of thumb. Doing so saves exactly two, but those are two wires to potentially break, and two wires to pay for.
But there&rsquo;s a pretty cool reason behind all of this.
In 1981, Boss couldn&rsquo;t rest on the laurels of being a legendary effects manufacturer: it had to build a reputation, which it did by offering invincible pedals at an unbeatable price point.
Even using the enclosure as a ground plane speaks to the dual priorities of build quality and cost that continue to make Boss pedals so ubiquitous, even today.</p>
]]></content>
		</item>
		
		<item>
			<title>💡 SignalBox: DIY Connected Lanterns with MQTT, Adafruit Feather</title>
			<link>https://ethan-cope.github.io/posts/thinking-of-you/</link>
			<pubDate>Sun, 25 Dec 2022 19:04:34 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/thinking-of-you/</guid>
			<description>Faced with the tradition of family Christmas gift giving, I was thoroughly stumped. I knew I wanted to do something maker-related: I&amp;rsquo;m the only engineer in the family, which tends to amplify the wow factor of any techncal projects :)
After my fallback plan (a Chemex coffee maker) fell through, I knew I had to build these!
the finished product!
These are long-distance friendship lanterns. The idea is, sometimes you want to let a distant friend or family member know that you&amp;rsquo;re thinking of them, even if you don&amp;rsquo;t necessarily want to shoot them a text.</description>
			<content type="html"><![CDATA[<p>Faced with the tradition of family Christmas gift giving, I was thoroughly stumped.
I knew I wanted to do something maker-related: I&rsquo;m the only engineer in the family, which tends to amplify the wow factor of any techncal projects :)</p>
<p>After my fallback plan (a Chemex coffee maker) fell through, I knew I had to build these!</p>
<figure><img src="boximg.jpg"
         alt="image"/><figcaption>
            <p>the finished product!</p>
        </figcaption>
</figure>

<p>These are <a href="https://www.instructables.com/DIY-Long-Distance-Best-Friend-Lights/">long-distance friendship lanterns</a>. The idea is, sometimes you want to let a distant friend or family member know that you&rsquo;re thinking of them, even if you don&rsquo;t necessarily want to shoot them a text. The lanterns couldn&rsquo;t be simpler to use: turning on your lantern also turns on your friends&rsquo; lantern, no matter where they are in the world.</p>
<h2 id="logic">Logic</h2>
<p>This project has multiple boxes (one for each family member), all of which can send &ldquo;thinking of you&rdquo; messages to each other. For example, if I&rsquo;m currently thinking about my dad, I can make his box light up from my box! But how does he know it&rsquo;s me that&rsquo;s thinking of him, and not someone else? To solve this, each box is assigned a color, which is associated with the box owner. So when I send a message to my dad, his box will become my color. To send a message, I can press the push button, which cycles through all the possible colors to send to. Not pressing the button for 2 seconds will send the message, lighting up the senders&rsquo; and receivers&rsquo; box for 2 hours. Confusing? I made a diagram.</p>
<figure><img src="box.drawio.png"
         alt="image"/><figcaption>
            <p>Feather Board (image credit to Adafruit)</p>
        </figcaption>
</figure>

<h2 id="the-code">The Code</h2>
<h3 id="mqtt">MQTT</h3>
<p>I knew that <a href="https://mqtt.org/">MQTT</a> would be a great fit for this project: it even bills itself as &ldquo;The standard for IoT messaging&rdquo;. It&rsquo;s lightweight, bidirectional, and requires minimal infrastructure.  Without getting too into the weeds, every message, or <strong>post</strong>, is published to a <strong>topic</strong>. Once a message is published to a topic, all other devices subscribed to the same topic receive the new message. By making a topic for each box, (i.e. the <em>green</em> box will receive any posts sent to the <em>green</em> topic), anyone&rsquo;s post to that box&rsquo;s topic will be interpreted as a message to turn that box on.</p>
<p>Of course, this system still requires a central server, called a broker, to make sure messages get to where they&rsquo;re sent. Luckily, <a href="https://console.hivemq.cloud/">HiveMQ</a> is one such server with a generous free tier that this project&rsquo;s constraints fall well within. It also <em>HAD</em> a <a href="https://console.hivemq.cloud/clients/arduino-esp8266?uuid=c689cd9ab0cf406bbc142988277304d9">super neat tutorial</a> for getting started on an Arduino, but the page seems to be broken. Either way, my implementation is based on their sample publish-receive code.</p>
<h3 id="arduino">Arduino</h3>
<p>Everyone and their mother knows that Arduino is the way to go for simple MCU programming. Abundant libraries handle all of the hard stuff, all you have to do is bring the logic. Besides some Linux issues (Manjaro didn&rsquo;t seem to like my UDEV rules, solution <a href="https://playground.arduino.cc/Linux/All/#Permission">here</a>), everything was simple to set up.</p>
<p>As for libraries, I utilized <a href="https://github.com/FastLED/FastLED/wiki/Basic-usage">FastLED</a> to program simple light animations in the Neopixel strip. ESP8266WiFi is obviously needed to connect the device to the network, and other boilerplate libraries such as <a href="">PubSubClient</a> and <a href="https://www.arduino.cc/reference/en/libraries/littlefs_esp32/">LittleFS</a> were used to authenticate with the HiveMQ server.</p>
<h2 id="parts-selection">Parts Selection</h2>
<figure><img src="feather.png"
         alt="image"/><figcaption>
            <p>Feather Board (image credit to Adafruit)</p>
        </figcaption>
</figure>

<p>I am blessed to live within driving distance of Micro Center, a legendary PC superstore with a sizeable DIY/maker section.
I knew I needed an Arduino board with wifi support, and Micro Center had the <a href="https://www.adafruit.com/product/2821">Adafruit Feather Huzzah</a> in stock.
This board&rsquo;s specs are overkill for this application, but it definitely does the job.
Also from the Micro Center haul was a strip of NeoPixels, and some push-button switches for control.
Add in a clear case from the container store, and we&rsquo;re ready to rock!</p>
<ul>
<li><a href="https://www.adafruit.com/product/2821">Adafruit Feather Huzzah ESP8266</a></li>
<li><a href="https://www.microcenter.com/product/459723/adafruit-industries-neopixel-digital-rgb-led-strip-white-60-led">Adafruit NeoPixel RGB LED Strip</a></li>
<li>Any momentary push-button switches</li>
<li><a href="https://www.containerstore.com/s/gift-packaging/gift-boxes/clear-amac-boxes/12d?productId=10003497">Clear AMAC enclosure</a></li>
</ul>
<h2 id="does-it-work">Does it work?</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/nyXzglq0ATc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="Quick Demo of Signalbox"></iframe>
</div>

<p>In short, yeah! The only issues I&rsquo;ve run into are logging related. When I rolled these boxes out, I didn&rsquo;t include any method of logging messages. This makes it very difficult to troubleshoot the boxes, since I simply don&rsquo;t know what&rsquo;s happening at any given time. Throw in the fact that I have no method of remotely updating the boxes, even small logic bugs are difficult to fix. But after being rolled out for 3 months, all the reported issues can be fixed just by power cycling the device, so I&rsquo;d call this a win! If you find any issues with my programming, don&rsquo;t hesitate to hit me with a pull request!</p>
]]></content>
		</item>
		
		<item>
			<title>Spelling Test Grader [UPDATE]</title>
			<link>https://ethan-cope.github.io/posts/auto-grader-update/</link>
			<pubDate>Fri, 23 Dec 2022 15:36:55 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/auto-grader-update/</guid>
			<description>One in six children who are not reading proficiently in third grade fail to graduate from high school on time, four times the rate for children with proficient third-grade reading skills. &amp;ndash; &amp;quot;Double Jeopardy&amp;quot;, Annie E. Casey Foundation
Since rolling out my spelling test grader, Catch Up and Read (CAR) has asked for more grading automation! Here&amp;rsquo;s a quick update on the new grader, the Phonics Survey.
What is a Phonics Survey?</description>
			<content type="html"><![CDATA[<blockquote>
<p>One in six children who are not reading proficiently in third grade fail to graduate from high school on time, four times the rate for children with proficient third-grade reading skills. &ndash; <!-- raw HTML omitted -->&quot;<a href="https://www.aecf.org/resources/double-jeopardy">Double Jeopardy</a>&quot;, Annie E. Casey Foundation<!-- raw HTML omitted --></p>
</blockquote>
<p>Since rolling out my spelling test grader, Catch Up and Read (CAR) has asked for more grading automation!
Here&rsquo;s a quick update on the new grader, the <em>Phonics Survey</em>.</p>
<h2 id="what-is-a-phonics-survey">What is a Phonics Survey?</h2>
<p>Throughout the span of the CAR program, students need to be benchmarked. The phonics survey determines which consonant-vowel blend types a student struggles with. By asking students to read words aloud, teachers mark down which words they struggle with, and tally up the number of incorrect words per section. They then use this data to plan their lessons around words that students have trouble with.</p>
<figure class="middle"><img src="PhonicsSurveyExample.png"
         alt="phonics survey example section"/><figcaption>
            <p>phonics survey example section</p>
        </figcaption>
</figure>

<p>Phonics surveys were historically administered through paper tests: a teacher would manually tally incorrect words, identify problem sections, and enter student information into a spreadsheet. Phonics surveys aren&rsquo;t particularly labor-intensive, but as CAR began supporting more schools, it became obvious that this solution wouldn&rsquo;t scale. Hence, automation!</p>
<h2 id="getting-online">Getting Online</h2>
<p>The biggest annoyance with the first iteration of the auto-grader was that it was a locally-saved HTML file. This worked fine from an implementation standpoint, but many users complained. To non-tech people, the concept of a local file also being an interactable webpage is a bit obtuse, so I decided to bite the bullet and roll it out to the World Wide Web. <a href="https://www.netlify.com/">Netlify</a> made this easier than it had any right being: if any changes have been pushed to the main branch of the project&rsquo;s Github, Netlify rolls these changes out to the production website. Their free tier offers <strong>more</strong> than enough bandwidth (100 GB!) for this project&rsquo;s use case.</p>
<h2 id="phonics-survey-implementation">Phonics Survey Implementation</h2>
<p>I wish I could make this glorified matching form sound sexy, but I can&rsquo;t. There&rsquo;s no algorithm, like the previous test. It just tallies the number of words that the user clicks, does a little formatting magic, and prints the page as a PDF. Regardless, there are still some interesting details I&rsquo;d like to point out.</p>
<figure class="middle"><img src="WebsiteUsage.png"
         alt="website example"/><figcaption>
            <p>website example</p>
        </figcaption>
</figure>

<ul>
<li>A PDF can&rsquo;t be saved unless the student&rsquo;s name, grade, and school are entered. This plaintext goes in the filename for easy recollection of data.</li>
<li>By pulling the current date, the program can automatically mark each test as <code>[Beginning, Middle, or End of Year]</code>. This is also referenced in the filename, easing recordkeeping.</li>
<li>The Save button automatically saves the webpage as a PDF <em>with</em> the colors encoded.</li>
</ul>
<figure class="middle"><img src="PDFexample.png"
         alt="generated PDF example"/><figcaption>
            <p>generated PDF example</p>
        </figcaption>
</figure>

<h2 id="so-what">So What?</h2>
<p>Look, this isn&rsquo;t rocket surgery. In truth, even posting something something this trivial feels a bit juvenile, especially in comparison to how much cool stuff goes down on <a href="https://hackaday.com/2022/11/21/reverse-engineering-the-seven-words-and-more-you-cant-say-on-tv/">Hackaday</a>. But instead of focusing on the technology, I&rsquo;d like to focus on the application and outcome.</p>
<p>Engineers love efficient solutions. But in pursuit of this efficiency, usability can be the first thing to go by the wayside. If a user doesn&rsquo;t use your tool because they can&rsquo;t figure it out, then it&rsquo;s not a good tool. My first version of this program was an objectively better solution: It used less memory, the data integrated with Excel, and it had a login system planned that allowed it to store student information to a MongoDB backend. When I showed it to users, all time-crunched and technically-challenged teachers, it was obvious over-optimization was holding back widespread adoption.</p>
<p>Around this time, I read a lot of posts from user-experience blog <a href="https://www.mobilespoon.net/2022/12/forms-completion-rates-statistics-and-takeaways.html">The Mobile Spoon</a> when working on this project, which led to an epiphany of user-central design. So I rebuilt the form, creating what amounted to an online version of the existing paper tests. I nixed the integrations, opting to instead generate a PDF which would be saved locally. I made the PDF generation idiot-proof: hitting &ldquo;Save&rdquo; names the PDF with the student&rsquo;s information and date, skips all dialog boxes, and automatically downloads to the Downloads folder.</p>
<h2 id="outcomes">Outcomes</h2>
<p>This updated program immediately began pulling it&rsquo;s weight: tests that used to take 30 minutes to grade were cut down to 5. Since CAR just hit 1000 students this year, this program (conservatively!) saved over 400 man-hours of manual test grading. Nearly every literacy coach organically mentioned this tool as a massive improvement in their end-of-year reflections. With the new consistency of data gathered, teachers were able to better identify student gaps, plan data-driven lessons, and push students to read on grade level.</p>
<h2 id="takeaways">Takeaways</h2>
<ol>
<li>Keep It Simple, Stupid! (KISS) This mantra has continued to ring true throughout every project I&rsquo;ve undertaken. Complexity has it&rsquo;s place, but it&rsquo;s better to have something bulletproof and simple than something flashy but unreliable.</li>
<li>Think of the user: Users won&rsquo;t necessarily appreciate that your program has O(n) space complexity. But they do appreciate being able to use your tools without an instruction manual or a degree in compsci.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>MGMT&#39;s Anti-Breakout Album: Congratulations</title>
			<link>https://ethan-cope.github.io/posts/congratulations/</link>
			<pubDate>Sat, 17 Dec 2022 10:20:53 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/congratulations/</guid>
			<description>We are absolutely dead serious about music-making, and that’s what we want people to understand, that there’s no joke in it. We’re not intentionally trying to f*ck with people, we’re actually making this music that we love and we want people to hear it.1 ~ Ben Goldwasser
You may not be familiar with MGMT, but anyone who had a pulse in the late 2000&amp;rsquo;s has most likely heard their work.</description>
			<content type="html"><![CDATA[<blockquote>
<p>We are absolutely dead serious about music-making, and that’s what we want people to understand, that there’s no joke in it. We’re not intentionally trying to f*ck with people, we’re actually making this music that we love and we want people to hear it.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> ~ Ben Goldwasser</p>
</blockquote>
<p>You may not be familiar with MGMT, but anyone who had a pulse in the late 2000&rsquo;s has most likely heard their work.
Don&rsquo;t believe me? Give this a listen and tell me it doesn&rsquo;t ring a bell.</p>

<iframe src="https://open.spotify.com/embed/track/1jJci4qxiYcOHhQR247rEU"
    width="100%"
    height="250"
    frameborder="0"
    allowtransparency="true"
    allow="encrypted-media"></iframe>


<p>Widely considered a two-hit-wonder by the radio-listening public (the other being <a href="https://www.youtube.com/watch?v=B9dSYgd5Elk">Time to Pretend</a>),
MGMT seemed destined to a fate of former-pop-star obscurity.
So two years after their smash-hit album Oracular Spectacular,
MGMT released their sprawling, hook-less sophomore effort Congratulations to unanimous critical &hellip; confusion.
But, Contratulations wasn&rsquo;t an intentional career suicide attempt (as many critics quickly branded it); it was the album that MGMT <em>needed</em> to make.</p>
<p>MGMT was on top of the world in 2008, and they didn&rsquo;t know what to do about it.
Their debut album had just gone gold in the US and double platinum in the UK. They headlined at music festivals and toured with Radiohead and Paul McCartney.
Not too bad for a project that Ben Goldwasser and Andrew VanWyngarden never intended to be any more than a joke.
At Wesleyan University, MGMT was known as the band that performed the Ghostbusters theme for 45 minutes straight in snowman costumes.
Even their name, MGMT, was a sardonic reference to their goal to &ldquo;sell out as quickly as possible&rdquo; to the &ldquo;Management&rdquo; of the corporate music conglomerate.
VanWyngarden puts it best:</p>
<blockquote>
<p>When we wrote <em>Time to Pretend</em>, we were totally taking the piss out of the rock star thing. And all of a sudden that song was, like, a single, and we had to play it every day for … two … years.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
</blockquote>
<p>As an artist, what do you do when your entire career is built on totally disingenuous work?</p>
<p>If you&rsquo;re MGMT, you release Congratulations.</p>
<figure class="small"><img src="AlbumCover.png"
         alt="image"/><figcaption>
            <p>Anthony Ausgang&rsquo;s excellent lowbrow album art</p>
        </figcaption>
</figure>

<p>The ascending, reverb-soaked guitar prepending <em>It&rsquo;s Working</em> signals that MGMT has changed dramatically since 2008.
Lyrics dreaming of hyper-stardom are traded for a <a href="https://www.youtube.com/watch?v=Yu9ykgGUm1w">Yes</a>-adjacent nonsense.
Gone are the rudimentary-yet-addictive synth hooks and bombastic Fridmann drums.
In their place are surf guitars, 60&rsquo;s organs, and harpsichords (???).
Producer Sonic Boom (of Spacemen 3 fame) earns his pay: this is a well, albeit strangely, produced album.
Production quirks like the beater-less kick drum in <em>Song for Dan Treacy</em> and massive, &lsquo;verbed out snare in <em>Siberian Breaks</em> utilize familiar instruments in offbeat ways, seemingly for strangeness&rsquo; sake alone.
The album is lush at times, and at others jarring and oblique.
But this instrumentation is just a jumping-off point for Congratulations&rsquo; most notable and interesting aspect: it&rsquo;s songwriting.</p>
<p>Congratulations is crazy and yet, it&rsquo;s also strangely addictive.
In many ways, Congratulations is an anti-Tame Impala album.
Instead of meticulously crafting buildups to emotional peaks of payoff, Congratulations opts to chase rabbit trails and go off the beaten path.
Lead-off track <em>It&rsquo;s Working</em> places half-second pauses between its distinct segments, seemingly acknowledging the musical incompatibility of each idea.
It&rsquo;s as if MGMT themselves don&rsquo;t even know how to string them together and ask you, the listener, to fill in the gaps.
Each song contains up to six or seven of these separate ideas, held together only by the common thread of instrumentation.
At times, it&rsquo;s confusing and dense and claustrophobic.
But in doing this, MGMT create their own brand of buildup.
The chaos of the first two verses in standout track <em>Flash Delirium</em> is used to greater multiply the spectacle of the bombastic, Spector-esque outro.
This songwriting method allows MGMT to build towards payoff without making these peaks feel cheap or manufactured.
On this musical journey, MGMT are enthusiastic local guides instead of corporate tour coordinators.</p>
<p>This album can best be described as isolated, consistent flashes of greatness.
Interestingly, this description mirrors MGMT&rsquo;s response to the dilemma of to pop-stardom in the first place.
A joke band that broke up and re-formed after being headhunted by Columbia Records, their fame only lasted as long as their songs remained on the top 40.
But instead of clinging desperately to relevance, MGMT took a bold step away from financial and career security in favor of their own artistic integrity.
This album stands as a musical reminder that but it takes real boldness to step away from fame and success, but the rewards of artistic freedom are much sweeter than the bitterness of being chained to other peoples&rsquo; expectations.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>From <a href="https://www.rollingstone.com/music/music-news/mgmt-on-aliens-drugs-and-congratulations-205423/">Rolling Stone&rsquo;s 2010 Interview</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>From <a href="https://www.theguardian.com/music/2010/apr/08/mgmt-congratulations-oracular-spectacular">The Guardian&rsquo;s 2010 Interview</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>🏆 MyMirror: a Google-integrated Smart Mirror</title>
			<link>https://ethan-cope.github.io/posts/mymirror/</link>
			<pubDate>Wed, 02 Feb 2022 13:28:52 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/mymirror/</guid>
			<description>Note: More information about myMirror can be found on the project&amp;rsquo;s devpost. Check there for other peoples&amp;rsquo; contributions!
Why myMirror? When I wake up in the morning, there&amp;rsquo;s a lot I know I probably should do. For example, I should probably prepare for the day ahead by checking the weather and my daily calendar. But often times, I just don&amp;rsquo;t. For situations like this, myMirror is here to help.
myMirror solves the above dilemma by integrating this crucial information into your everyday bathroom mirror.</description>
			<content type="html"><![CDATA[<p><em>Note: More information about myMirror can be found on <a href="https://devpost.com/software/mymirror">the project&rsquo;s devpost</a>.</em>
<em>Check there for other peoples&rsquo; contributions!</em></p>
<h2 id="why-mymirror">Why myMirror?</h2>
<p>When I wake up in the morning, there&rsquo;s a lot I know I probably should do.
For example, I should probably prepare for the day ahead by checking the weather and my daily calendar.
But often times, <strong>I just don&rsquo;t</strong>. For situations like this, myMirror is here to help.</p>
<p>myMirror solves the above dilemma by integrating this crucial information into your everyday bathroom mirror.
myMirror is a <em>smart mirror</em> with an embedded display screen,
displaying the current time and date, weather for your area, and personal Google Calendar reminders.
It even features a motion sensor, turning off the display to save power when a user isn&rsquo;t detected.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<figure class="middle"><img src="Software.png"
         alt="image"/><figcaption>
            <p>The software side of myMirror</p>
        </figcaption>
</figure>

<p>On the software side, myMirror is essentially a specialized website. It&rsquo;s written in pure Javascript, HTML, and CSS.
It utilizes the Open Weather Maps and Google Calendar APIs to display this information to the user.
The mirror itself is a pane of one-way glass with a 3.5&quot; display is mounted behind it.
A modified Raspberry Pi drives the display and handles the power management alongside the motion sensor.</p>
<h3 id="what-did-you-do">What did you do?</h3>
<p>myMirror was my idea, so I ended up leading the charge to get this project finished in 24 hours.
As the team lead, I had to check in with others, keep morale up, and delegate tasks where I wasn&rsquo;t the best person for the job.
But I did quite a bit of programming myself! I handled the hardware side of myMirror.
This included:</p>
<ul>
<li>Modifying the pi to drive a display with non-standard resolution and aspect ratios</li>
<li>Programming a daemon that interfaces with xScreenSaver to unblank the screen when motion is detected</li>
<li>Automating the execution of the program in case of power loss or a hard reboot</li>
</ul>
<h2 id="whats-next-for-mymirror">What&rsquo;s next for myMirror?</h2>
<p>There are a few upgrades we&rsquo;re considering implementing.</p>
<ul>
<li>
<p>First off, we want a serious codebase refresh. Anything written in 24 hours could stand to be written again in a cleaner, more concise way.</p>
</li>
<li>
<p>Next, a bigger display. 3.5&quot;x2&quot; is just too small for any sizeable mirror.
The next step will most likely be the Raspberry Pi Foundation&rsquo;s own official 7&quot; display.</p>
</li>
<li>
<p>More Information! With great display space comes great responsibility: to fill that space with relevant data!
Some ideas:</p>
<ul>
<li>Texas A&amp;M Bus Schedule - Either using code swiped from Buswarn or the Texas A&amp;M Transport website.
myMirror could display what time the next bus arrives at your stop, or it the transport map itself!</li>
<li>Spotify - This could be as simple as a progress bar with information about the current song you&rsquo;re listening to.</li>
</ul>
</li>
</ul>
<figure class="middle"><img src="demo.jpg"
         alt="image"/><figcaption>
            <p>myMirror in action! (feat: me)</p>
        </figcaption>
</figure>

<h2 id="who-contributed">Who contributed?</h2>
<ul>
<li>Me! (<a href="https://www.linkedin.com/in/ethancope">Ethan Cope</a>) - Director, hardware, and scripting</li>
<li><a href="https://www.linkedin.com/in/alexander-anderson43d/">Alex Anderson</a> - Frontend and weather integration</li>
<li><a href="https://www.linkedin.com/in/claytonkristiansen/">Clayton Kristiansen</a> - Google Calendar integration</li>
<li><a href="">Alexandria Garcia</a> - API integration and documentation</li>
</ul>
<p><em>Notably: none of these guys are computer science majors! We learned most of this Web Development stuff on the fly!</em></p>
<h2 id="where--when">Where / When?</h2>
<p>TamuHack 2022, Jan 29-30 2022.
TamuHack is a Hackathon, a contest where teams of 4 engineers have 24 hours to design, implement, and present a product to industry judges.</p>
<h2 id="takeaways">Takeaways</h2>
<p>myMirror won first place in the novice division at TamuHack 2022.
But I walked away from this competition with more than just newfound pride and acute sleep deprivation.
As the team lead, I didn&rsquo;t really have time to hunker down and work on my own thing, which was a new experience for me.
But through this process I learned to sit back and trust people to do their work well.
When a small team of skilled people all play to their strengths, crazy ideas like myMirror can actually come to life!</p>
<p>Thanks for tuning in!</p>
]]></content>
		</item>
		
		<item>
			<title>Spelling Test Auto-Grader for Catch Up and Read</title>
			<link>https://ethan-cope.github.io/posts/auto-grader/</link>
			<pubDate>Wed, 12 Jan 2022 18:21:31 -0600</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/auto-grader/</guid>
			<description>&amp;ldquo;Automation is good, so long as you know exactly where to put the machine.&amp;rdquo;
~ Eliyahu Goldratt
One perk of being a programmer is the ability to automate boring, repetitive tasks to ease my workload. But what&amp;rsquo;s even more rewarding is the opportunity to help non-programmers with their data analysis drudgery. Such is the case with this project.
The Problem My mom works for Catch Up and Read, a Dallas non-profit that helps below-reading-level students catch up before third grade.</description>
			<content type="html"><![CDATA[<blockquote>
<p>&ldquo;Automation is good, so long as you know exactly where to put the machine.&rdquo;<br>
~ Eliyahu Goldratt</p>
</blockquote>
<p>One perk of being a programmer is the ability to automate boring, repetitive tasks to ease my workload.
But what&rsquo;s even more rewarding is the opportunity to help non-programmers with their data analysis drudgery.
Such is the case with this project.</p>
<h2 id="the-problem">The Problem</h2>
<p>My mom works for <a href="https://www.catchupandread.org/">Catch Up and Read</a>, a Dallas non-profit that helps below-reading-level
students catch up before third grade.
Their problem was quickly and easily grading third-grade spelling tests.
By analyzing patterns of how a student misspells words,
a smart teacher can determine what concepts that student struggles with and modify their lesson plan accordingly.
This analysis is tedious, requires a fair amount of calculation, and if you&rsquo;ve made it this far you know where this is going.
<strong>Automation!!</strong></p>
<h2 id="constraints">Constraints</h2>
<p>This program had an interesting soup of additional constraints that made it especially fun to write:</p>
<ul>
<li>The program must be intuitive - Any teacher should be able to walk up and use it without training. This means the program needs to be extremely robust and have a very pretty user interface.</li>
<li>The program must be easily distributable - It can&rsquo;t require installing a program or programming language onto the user&rsquo;s computer</li>
<li>The program has to be accessible through public school wifi - no easy feat with archaic whitelist-based firewalls.</li>
</ul>
<p>Given these constraints, I decided to commit a cardinal sin of web development - combining css, javascript, and HTML on a single file.
Doing so would allow me to distribute an HTML file containing the program to teachers, bypassing the firewall issue entirely.</p>
<h2 id="implementation">Implementation</h2>
<figure class="middle"><img src="chunks.png"
         alt="the many chunks of the English language"/><figcaption>
            <p>the many chunks of the English language</p>
        </figcaption>
</figure>

<p>Jumping right in: each word on the test can be split up into chunks, all of which are seen above.
Teachers normally go through each word the child has misspelled and determine which chunks have been missed.
They then tally up each of these incorrect chunks and highlight the most missed chunks on the sheet seen above.</p>
<p>In order to mimic this behavior, my program splits the word into &ldquo;runs&rdquo; of vowels and consonants.
English also has more complex chunks made up of vowels and consonants: the program uses Regex to handle these special cases.
For the intents and purposes of this program (and the English language, for that matter) these special-case chunks are vowels.</p>
<h3 id="an-example">An example</h3>
<p>Let&rsquo;s consider the word <strong>fright</strong></p>
<ul>
<li>The first match is <strong>fr</strong>, a run of 2 consonants</li>
<li>Next, it matches <strong>igh</strong>, a special case chunk called a Long Vowel</li>
<li>Finally, the program matches t, a single consonant</li>
</ul>
<p>So, this word chunked up is <code>['fr', 'igh', 't']</code>
Below is an example of how the program grades a student who entered &lsquo;freit&rsquo; instead of fright.</p>
<figure class="middle"><img src="diagram.png"
         alt="grading &amp;lsquo;freit&amp;rsquo;"/><figcaption>
            <p>grading &lsquo;freit&rsquo;</p>
        </figcaption>
</figure>

<p>In order to grade the incorrect word, we need to chunk-ify the correct word and compare the two.
We first (1) determine the vowel-consonant pattern of the valid word: for &lsquo;fright&rsquo;, this pattern is <code>[consonant, vowel, consonant]</code>.
Then, we (2) split each word&rsquo;s chunks into two queues: one for vowels, and the other for consonants. (step 2)
We then use this pattern to (3) dequeue the vowels and consonants in the correct order
and determine if they match. Finally, we (4) count up every incorrect chunk and display it back to the user.</p>
<figure class="middle"><img src="ChunkExample.png"
         alt="word analysis section of program"/><figcaption>
            <p>word analysis section of program</p>
        </figcaption>
</figure>

<p><em>Word Analysis</em></p>
<ul>
<li>&ldquo;blayde&rdquo; marks both &lsquo;a&rsquo; and &rsquo;e&rsquo; incorrect because together they form an incorrect long vowel.</li>
<li>when the program doesn&rsquo;t have enough chunks to work with, as is the case with &ldquo;kat&rdquo; being entered for the word &ldquo;camped&rdquo;, it marks these extra chunks as incorrect.</li>
</ul>
<p><figure class="right"><img src="ChunkAnalysis.png"
         alt="chunk analysis program section"/><figcaption>
            <p>chunk analysis program section</p>
        </figcaption>
</figure>

<em>Chunk Analysis</em></p>
<ul>
<li>The analysis section displays which chunks a student has had repeated issues with.</li>
<li>If the student&rsquo;s answer differs greatly from the vowel-consonant pattern of the correct word,
the program can mark chunks as wrong, even if they were correct in their own context.
By clicking on these wrongly-marked chunks, they can be factored out of the calculations.</li>
</ul>
<h2 id="takeaways">Takeaways</h2>
<p>Outside of the core program, the difficulty of this this project lay in the sheer number of edge cases.
Word endings, long vowels, and unmatching vowel-consonant patterns all had to be handled gracefully.
<del>While it would have been great to deploy this to a website to show it off, saving the file locally just made more sense.</del>
The webapp is now up and running, hosted on <a href="https://www.netlify.com/">Netlify</a>! See the <a href="">update</a> here.</p>
<p>In the future, I&rsquo;d love to expand this program to work with the Spanish-language tests as well.
Doing so would be a slog (mo chunks, mo problems). If anyone wants to take a crack at decoding Spanish, here&rsquo;s the
<a href="https://github.com/ethan-cope/ChunkGrader">Github Repo</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Professional CD Crafting with CDRDAO</title>
			<link>https://ethan-cope.github.io/posts/cdrdao/</link>
			<pubDate>Tue, 04 Jan 2022 13:55:04 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/cdrdao/</guid>
			<description>All digital music listeners are equal. Acquisition is painless. Taste is irrelevant. It is pointless to boast about your iTunes collection, or the quality of your playlists on a streaming service. Music became data, one more set of 1&amp;rsquo;s and 0&amp;rsquo;s lurking in your hard drive, invisible to see and impossible to touch. Nothing is less cool than data. ~ David Sax
Physical media is back. vinyl and cassette sales are through the roof, and why shouldn&amp;rsquo;t they be?</description>
			<content type="html"><![CDATA[<blockquote>
<p>All digital music listeners are equal. Acquisition is painless. Taste is irrelevant. It is pointless to boast about your iTunes collection, or the quality of your playlists on a streaming service. Music became data, one more set of 1&rsquo;s and 0&rsquo;s lurking in your hard drive, invisible to see and impossible to touch. Nothing is less cool than data. ~ David Sax</p>
</blockquote>
<p>Physical media is back. vinyl and cassette sales are through the roof, and why shouldn&rsquo;t they be? Digital music services have deprived us of that tactile feel of dropping a needle onto a well-worn album, and the intimate experience of pulling a record from its sleeve.<br>
But today I&rsquo;m focusing on the least flashy member of the physical media family: CDs.</p>
<h2 id="why-cds">Why CDs?</h2>
<p>Everyone loves CDs. Seriously, even though it&rsquo;s been a decade since anyone&rsquo;s used a CD player,
popping open a jewel case brings warm nostalgic memories to the forefront of our minds.
But besides the nostalgia factor, why bother with CDs?</p>
<ul>
<li>First off, CDs are highly customizable. Don&rsquo;t like the ending of a song? Wish the crossfade was smoother between a few tracks on a playlist? Spend half an hour with editing software such as <a href="https://www.audacityteam.org/">Audacity</a>, and you can turn your digital playlists into mixtapes that rival albums and surpass playlists in musicality and momentum.</li>
<li>CD players are cheap, and most modern vehicles still have them. Unlike a phone, your favorite mixtape won&rsquo;t run out of battery!</li>
<li>If you have an artistic bent, you can make CD art with nothing more than a few sharpie markers, like this!</li>
</ul>
<figure class="middle"><img src="https://i.redd.it/mnz4x8mxc5iz.jpg"
         alt="image"/><figcaption>
            <p>Note: not my art, belongs to reddit user <a href="https://www.reddit.com/r/themurlocs/comments/6w8470/sometimes_i_get_carried_away_with_my_burnt_cd/">mddecker</a></p>
        </figcaption>
</figure>

<h2 id="the-problem">The Problem</h2>
<p>If you&rsquo;ve ever tried to burn your own CDs using Windows Media Player or similar software, you know the results are much less than ideal.
Because WMP burns the entire tracklist track-by-track, the CD player needs a half-second gap between <strong>each track</strong>.
While an eloquent solution to be sure, this understandably kills an album&rsquo;s flow, it&rsquo;s momentum.</p>
<p>So why do retail CDs not have this issue?
Well, instead of burning track by track, retail CDs are burned in DAO, or Disk-At-Once mode.
Doing so encodes the track boundaries in the CD&rsquo;s metadata, which in turn tells the CD player <em>exactly</em> where each track starts and ends. No gaps!
Burning discs in DAO mode gives other benefits as well. Want track names that are visible on the CD Player? Want secret tracks akin to runout grooves on old records? All these are possible with DAO burning.</p>
<p>DAO burning software was once exorbitantly expensive and hard to track down.
But luckily, our friends in the open-source community have a solution: <a href="http://cdrdao.sourceforge.net/">cdrdao</a>.</p>
<h1 id="using-cdrdao">Using CDRDAO</h1>
<p>CDRDAO is a command-line only program. but don&rsquo;t be scared!
Dear reader, I&rsquo;ve done just about everything I can to make using this powerful program as easy as possible!
However, you&rsquo;ll need a few things first.</p>
<ul>
<li>a computer that <strong>has A DVD RW Drive</strong> and is running some distribution of <strong>Linux</strong>.</li>
<li>my <a href="https://github.com/ethan-cope/cdrdao-tools">code</a> from github</li>
<li>music files to be burned to a CD: .wav, m4a, or mp3 files</li>
</ul>
<h2 id="downloading-needed-programs">Downloading needed programs</h2>
<p>here, you need cdrdao and ffmpeg. both can be acquired from your friendly neighborhood package manager.</p>
<p>On Arch Linux:</p>
<pre tabindex="0"><code>sudo pacman -S cdrdao ffmpeg 
</code></pre><h2 id="converting-files-to-wav">Converting files to .wav</h2>
<p>Cdrdao only works with .wav files. If your tracks are pulled from iTunes, they might be .m4a, or possibly .mp3 files.
ffmpeg makes converting them relatively easy, but I also wrote a script that makes this process even more simple!
This script quickly converts all the files in a directory of a given extension to .wav files, which can work with cdrdao!
Here&rsquo;s how to use it:</p>
<ol>
<li>in <code>convertToWav.sh</code>, modify the <code>FILES</code> variable to reflect the file type you&rsquo;re converting from. For example:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.m4a <span class="c1"># this will convert all .m4a files in the directory to .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.mp3 <span class="c1"># this will convert all .mp3 files in the directory to .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">FILES</span><span class="o">=</span>*.&lt;extension type&gt; 
</span></span><span class="line"><span class="cl"><span class="c1"># this will convert all .&lt;extension type&gt; files in the directory to .wav files</span>
</span></span></code></pre></div><ol start="2">
<li>Run the program specifying the source directory as follows below:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">convertToWav.sh ../Music/Crime_of_the_Century 
</span></span><span class="line"><span class="cl"><span class="c1">#this will convert all audio files in ../Music/Crime_of_the_Century into .wav files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">convertToWav.sh &lt;path to <span class="nb">source</span> directory&gt; 
</span></span><span class="line"><span class="cl"><span class="c1">#this will convert all audio files in &lt;source directory&gt; to .wav files</span>
</span></span></code></pre></div><p><strong>NOTE:</strong> Not all .wav files are created equal! Some don&rsquo;t work with cdrdao due to encoding issues.
to work around this, change the extension to <code>.wav</code>, and run the conversion program!</p>
<h2 id="song-number-shifting">Song Number Shifting</h2>
<p>When burning with CDRDAO, all your tracks need to be in the same directory.
In order to preserve song order, each track is numbered like so: <code>'01 In This State.wav'</code>
If you&rsquo;re building a mixtape song-by-song, manually re-numbering tracks is no problem.
But if you&rsquo;re putting multiple songs from the same source on a disc, this gets tedious. enter <code>songShift.sh</code>.</p>
<p>Let&rsquo;s use an example for this one. I have 3 directories: <code>Album1</code>, <code>Album2</code>, which contain songs I want to combine into one CD,
and <code>Mixtape</code>, which will hold the final album .wav files in the correct order.
Let&rsquo;s say we want to put Album2 after Album1, and Album1 is 8 tracks long.
Then we&rsquo;ll run the program like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">songShift.sh &lt;path to Album2&gt; <span class="m">8</span> <span class="c1">#shifting all track numbers by 8</span>
</span></span><span class="line"><span class="cl">cp &lt;path to Album2&gt;/*.wav &lt;path to Mixtape&gt; <span class="c1"># copying all the shifted songs to the Mixtape dir.</span>
</span></span></code></pre></div><h2 id="generating-toc">Generating TOC</h2>
<p>Cdrdao uses a TOC (or Table Of Contents) file as a template for the contents of the CD. This file contains the track listings, and is used to burn the CD with pretty track names.
Full documentation for TOC files is found <a href="https://tldp.org/HOWTO/MP3-CD-Burning/dao-burning.html">here</a>.
I wrote a script to take some of the tedium out of generating these TOC files.
Simply run the program as follows!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">genToc.sh &lt;path to directory with .tracks&gt;
</span></span></code></pre></div><h2 id="burning-cd">Burning CD</h2>
<p>The next step is simulating the CD burn, which allows you to catch any errors before actually burning the CD.
Just run <code>cdrdao simulate</code> in the same directory as the TOC file and .wav files. If this doesn&rsquo;t spit out any errors, you&rsquo;re ready to burn!
Run the following command to burn the CD!</p>
<pre tabindex="0"><code>cdrdao write --driver generic-mmc-raw --eject (toc file name) 
</code></pre><h2 id="future-improvements">Future Improvements</h2>
<ul>
<li>I was really interested in doing all of this from the Linux command line, so there are no instructions for Windows. I know a Windows version of CDRDAO exists, so best of luck translating these instructions to Microsoft-ese, Windows users!</li>
<li>I also eventually want to modify the wav converter to work with files other than m4a.</li>
</ul>
<h3 id="small-aside">Small Aside</h3>
<p>A few people claim that CD sound quality is bad, 44.1 kHz music isn&rsquo;t high-res enough,
and that <em>they</em> can hear the difference between low and high bitrate music.
While this indeed used to be the case (with <em>extremely</em> low bitrate music), it is no longer true.
Don&rsquo;t believe me? Check out <a href="https://www.soundguys.com/high-bitrate-audio-is-overkill-cd-quality-is-still-great-16518/">this article</a>!</p>
]]></content>
		</item>
		
		<item>
			<title>Echo-Matic Deluxe (Part 1): Marantz-based DIY Tape Echo</title>
			<link>https://ethan-cope.github.io/posts/echo-matic_special/</link>
			<pubDate>Fri, 15 Oct 2021 13:07:50 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/echo-matic_special/</guid>
			<description>Back in 2019, I saw the influential space-rock group Wand live. It was an amazing set of mostly new tunes, but I was a tad distracted by their lead guitarist. He was fiddling with a battered green box for the whole set, and doing so sent his guitar part soaring over the rest of the band in the most atmospheric, gooey wash imaginable. This was my first introduction to the weird, wonderful world of tape echo, and I wanted one!</description>
			<content type="html"><![CDATA[<p><img src="https://img.audiofanzine.com/images/u/product/normal/roland-re-201-space-echo-6085.jpg" alt="thing"></p>
<p>Back in 2019, I saw the influential space-rock group <a href="https://www.youtube.com/watch?v=h9PcHA5Ievk">Wand</a> live.
It was an amazing set of mostly new tunes, but I was a tad distracted by their lead guitarist.
He was fiddling with a battered green box for the whole set, and doing so sent his guitar part soaring over the rest of the band in the most atmospheric, gooey wash imaginable.
This was my first introduction to the weird, wonderful world of tape echo, and I wanted one!</p>
<p>Sadly, vintage tape echoes (such as the Roland RE201 Cory was using that night) go for
<em><strong><a href="https://reverb.com/p/roland-space-echo-re-201">thousands</a></strong></em>
on the used market, and are notoriously finnicky to maintain.
Cheaper digital emulations unsurprisingly fail to capture the warm, fuzzy magic of these complex analog devices.
But one day I stumbled on a <a href="https://www.youtube.com/watch?v=ABU-psBnmxk">youtube video</a> demonstrating a DIY tape echo built from nothing more than a few analog components and a tape deck, and I knew I had to make one!</p>
<h2 id="the-theory">The Theory</h2>
<p>Conceptually, tape echo is pretty simple. Consider a tape deck with 3 heads: a record head, a monitor head, and an erase head.
When recording on a 3-head deck, the signal that&rsquo;s just been recorded to the tape by the record head is captured and sent out via the playback head.
But when you send this monitor output signal directly back into the line-in jack, a feedback loop is created,
and your original sound is repeated.
From there, all you need are controls!</p>
<ul>
<li>Varying the speed of the tape deck motor changes the speed of the tape, which in turn controls the delay time.</li>
<li>Adding a resistance in the feedback loop controls the amount of signal fed back into the unit, which in turn varies the number of delay repeats.</li>
<li>Add a potentiometer to control the wet/dry mix and a volume output knob, and you have a tape delay!</li>
</ul>
<h2 id="the-circuit">The Circuit</h2>
<p>The circuit I&rsquo;m utilizing is a modified version of <a href="https://proto-schlock.blogspot.com/2015/04/echo-matic-diy-tape-delay.html">Proto-Schlock&rsquo;s</a>, who in turn got it from Boscorelli&rsquo;s <em>the StompBox Cookbook</em>.</p>
<ul>
<li>My most notable modification is the addition of a reverb module from BYOC, to simulate the orginal RE201 unit&rsquo;s spring reverb. If you don&rsquo;t want to do this, just connect <code>TO_RV</code> and <code>FROM_RV</code> with a jumper wire.</li>
<li>I also added a low-pass filter to the feedback loop, since high frequencies tend to make my unit self-oscillate.
you should experiment with different filters and filter designs here!</li>
</ul>
<figure class="big"><img src="schematic.png"
         alt="image"/><figcaption>
            <p>the modified schematic</p>
        </figcaption>
</figure>

<h2 id="the-materials">The Materials</h2>
<p>Ebay is a wonderful place. One where you can get a late 70&rsquo;s 3-head stereo tape recorder for $40 + shipping.
These old Marantz 3-head decks still have a pretty devoted following, so this unit was an absolute steal!
I already had a DIY spring reverb pedal from <a href="https://buildyourownclone.com/">BYOC</a> lying around, which would emulate the gooey reverb of the original unit without having to buy a separate reverb tank.
The rest of the parts for this project were relatively easy to source at <a href="https://smallbear-electronics.mybigcommerce.com/">Small Bear</a>, my go-to for quality guitar pedal components. I&rsquo;ve included a BOM for the project in the Github Repo.</p>
<h2 id="the-build">The Build</h2>
<h3 id="prototyping">Prototyping</h3>
<p>After acquiring all the parts, it was prototyping time!</p>
<figure><img src="breadboard1.jpeg"
         alt="image"/><figcaption>
            <p>not the cleanest, I&rsquo;ll be the first to admit</p>
        </figcaption>
</figure>

<p>Despite the circuit&rsquo;s complexity, breadboarding wasn&rsquo;t all that bad.
I hooked it up to the tape deck and&hellip; it worked! In retrospect, I&rsquo;m really glad I tested this on the breadboard first.
Doing so let me experiment with a few different high-pass filter designs before I decided on the one in the schematic.</p>
<h3 id="motor-control">Motor Control</h3>
<p>Next step: modifying the motor controller. Some tape units have this functionality built-in, but mine didn&rsquo;t. to work around this, I coupled the motor to it&rsquo;s power source via a PWM controller.
It&rsquo;s ideal to have this PWM frequency above the audio range (greater than 20 kHz).</p>
<p>or&hellip; at least it would. For some reason, my PWM controllers didn&rsquo;t want to play nice with the tape deck&rsquo;s motor.
I ended up going the analog route of putting a potentiometer inline with the motor to control the motor speed.
Every motor is different, but mine stalled at any resistance over 50 Ohms.</p>
<figure class="right"><img src="board.png"
         alt="image"/><figcaption>
            <p>the finished board</p>
        </figcaption>
</figure>

<h3 id="manufacturing">Manufacturing</h3>
<p>Finally, it was time to manufacture.
If you want to make this project yourself, I&rsquo;ve provided the Autodesk Eagle .brd files in the Github repo. Note that this is the first time I&rsquo;ve designed a pcb, so it may not be perfect! I manufactured it with <a href="https://aisler.net/">Aisler</a>,
and only paid $10 for 3 boards!</p>
<h2 id="part-1-thoughts">Part 1 Thoughts</h2>
<p>It&rsquo;s going to be a while before I get back on this project.
Aisler takes about a month to manufacture, and junior year is starting up. Stay tuned for a part 2!</p>
]]></content>
		</item>
		
		<item>
			<title>Buswarn: RasPi-based Transit Bus Tracking</title>
			<link>https://ethan-cope.github.io/posts/buswarn/</link>
			<pubDate>Mon, 27 Sep 2021 12:53:34 -0500</pubDate>
			
			<guid>https://ethan-cope.github.io/posts/buswarn/</guid>
			<description>Public transportation is like a magnifying glass that shows you civilization up close. ~ Chris Gethard
What is Buswarn? During the COVID year, I moved off-campus. I didn&amp;rsquo;t realize at the time, but my only lifeline to my in-person classes, study rooms, and meals would be the Texas A&amp;amp;M Bus Transit System. Problems manifested themselves quickly. Buses ran at seemingly random intervals, and the website that displayed the schedule often had errors rendering on my mobile phone.</description>
			<content type="html"><![CDATA[<blockquote>
<p>Public transportation is like a magnifying glass that shows you civilization up close. ~ Chris Gethard</p>
</blockquote>
<h2 id="what-is-buswarn">What is Buswarn?</h2>
<p>During the COVID year, I moved off-campus. I didn&rsquo;t realize at the time, but my only lifeline to my in-person classes, study rooms, and meals would be the Texas A&amp;M Bus Transit System.
Problems manifested themselves quickly. Buses ran at seemingly random intervals, and the website that displayed the schedule often had errors rendering on my mobile phone.
What I needed was a simple device that displayed how many minutes I had to wait until the next bus arrived at my apartment.
This device wouldn&rsquo;t require me to have the foresight of googling the schedule and doing mental math to determine what time to leave my apartment in order to make the next bus.
Armed with these design goals, I set to work with a Raspberry Pi and few 7-segment displays I had lying around.</p>
<h2 id="design">Design</h2>
<p>Here&rsquo;s the birds-eye view of how the code works.</p>
<ol>
<li>Download the schedule website for the desired route from the internet every morning</li>
<li>Process the timetable, and generate a list of times buses will arrive at my bus stop</li>
<li>Compare the current time with next bus arrival time, and print the difference to a 7-segment display</li>
<li>Gracefully handle website outages and power cycles to the pi.</li>
<li>Turn the pi off at the end of the day and repeat</li>
</ol>
<h2 id="implementation">Implementation</h2>
<p>Buswarn was written in Python, and I have bits of it written in C in case I want to implement it on a Arduino later down the road.</p>
<ul>
<li>I wanted to use this as an opportunity to bone up on my HTML skills, and ended up using the BeautifulSoup library to parse the HTML table into a Python array.</li>
<li>The LCD is controlled by a custom Python library that can be used on using on future projects.</li>
<li>This is the first project I&rsquo;ve developed entirely remotely through SSH on a headless machine.</li>
</ul>
<figure class="big"><img src="operation.gif"
         alt="image"/><figcaption>
            <p>prototype working fine!</p>
        </figcaption>
</figure>

<h2 id="constraints-and-challenges">Constraints and Challenges</h2>
<p>This project&rsquo;s main challenge was writing an extremely resilient program that could be left to run without breaking for extended periods of time.
In practice, this meant handling a <strong>LOT</strong> of edge cases.
For example, on football game days the website I pulled information from was essentially offline.
Handling these edge cases individually offered me total control over the program&rsquo;s stability. It&rsquo;s been running for a few months now with no errors whatsoever!
Here&rsquo;s the <a href="https://github.com/ethan-cope/pybuswarn">Github Repo</a>.</p>
<h2 id="future-changes">Future Changes</h2>
<p><em>in order from least to most difficult to implement</em></p>
<ul>
<li>The Nokia 5110 display suits this project much better than 7-segments.
The 5110 is a 84x48 px lcd display with a backlight, which consumes less power and is much more visible in high-brightness environments.
I&rsquo;ve been having problems getting it to work on the Pi, so it&rsquo;s currently on the drawing board.</li>
<li>A classic engineering problem: it works, but it&rsquo;s not exactly pretty. even a 3d printed enclosure would go a long way to make it more presentable.</li>
<li>I&rsquo;d love to eventually build these as low-power self-contained nodes in a LORA mesh. This would allow these stations to be installed at any bus station that has sunlight, no internet or power required.
I&rsquo;ll explore this possibility when I delve more into my self-contained LORA mesh project.</li>
</ul>
<h2 id="final-words">Final Words</h2>
<p>This project taught me loads about building a program to an incredibly high reliability standard, and directly influenced my development mindset when tackling programming challenges at Stanley Black &amp; Decker.</p>
]]></content>
		</item>
		
	</channel>
</rss>
